
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Subaccount
 * 
 */
export type Subaccount = $Result.DefaultSelection<Prisma.$SubaccountPayload>
/**
 * Model Interaction
 * 
 */
export type Interaction = $Result.DefaultSelection<Prisma.$InteractionPayload>
/**
 * Model InterviewReport
 * 
 */
export type InterviewReport = $Result.DefaultSelection<Prisma.$InterviewReportPayload>
/**
 * Model ResumeProfile
 * 
 */
export type ResumeProfile = $Result.DefaultSelection<Prisma.$ResumeProfilePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subaccount`: Exposes CRUD operations for the **Subaccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subaccounts
    * const subaccounts = await prisma.subaccount.findMany()
    * ```
    */
  get subaccount(): Prisma.SubaccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interaction`: Exposes CRUD operations for the **Interaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Interactions
    * const interactions = await prisma.interaction.findMany()
    * ```
    */
  get interaction(): Prisma.InteractionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interviewReport`: Exposes CRUD operations for the **InterviewReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InterviewReports
    * const interviewReports = await prisma.interviewReport.findMany()
    * ```
    */
  get interviewReport(): Prisma.InterviewReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeProfile`: Exposes CRUD operations for the **ResumeProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeProfiles
    * const resumeProfiles = await prisma.resumeProfile.findMany()
    * ```
    */
  get resumeProfile(): Prisma.ResumeProfileDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Subaccount: 'Subaccount',
    Interaction: 'Interaction',
    InterviewReport: 'InterviewReport',
    ResumeProfile: 'ResumeProfile'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "subaccount" | "interaction" | "interviewReport" | "resumeProfile"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Subaccount: {
        payload: Prisma.$SubaccountPayload<ExtArgs>
        fields: Prisma.SubaccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubaccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubaccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload>
          }
          findFirst: {
            args: Prisma.SubaccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubaccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload>
          }
          findMany: {
            args: Prisma.SubaccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload>[]
          }
          create: {
            args: Prisma.SubaccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload>
          }
          createMany: {
            args: Prisma.SubaccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubaccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload>[]
          }
          delete: {
            args: Prisma.SubaccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload>
          }
          update: {
            args: Prisma.SubaccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload>
          }
          deleteMany: {
            args: Prisma.SubaccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubaccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubaccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload>[]
          }
          upsert: {
            args: Prisma.SubaccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubaccountPayload>
          }
          aggregate: {
            args: Prisma.SubaccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubaccount>
          }
          groupBy: {
            args: Prisma.SubaccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubaccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubaccountCountArgs<ExtArgs>
            result: $Utils.Optional<SubaccountCountAggregateOutputType> | number
          }
        }
      }
      Interaction: {
        payload: Prisma.$InteractionPayload<ExtArgs>
        fields: Prisma.InteractionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InteractionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InteractionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          findFirst: {
            args: Prisma.InteractionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InteractionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          findMany: {
            args: Prisma.InteractionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>[]
          }
          create: {
            args: Prisma.InteractionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          createMany: {
            args: Prisma.InteractionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InteractionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>[]
          }
          delete: {
            args: Prisma.InteractionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          update: {
            args: Prisma.InteractionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          deleteMany: {
            args: Prisma.InteractionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InteractionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InteractionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>[]
          }
          upsert: {
            args: Prisma.InteractionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteractionPayload>
          }
          aggregate: {
            args: Prisma.InteractionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInteraction>
          }
          groupBy: {
            args: Prisma.InteractionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InteractionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InteractionCountArgs<ExtArgs>
            result: $Utils.Optional<InteractionCountAggregateOutputType> | number
          }
        }
      }
      InterviewReport: {
        payload: Prisma.$InterviewReportPayload<ExtArgs>
        fields: Prisma.InterviewReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InterviewReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InterviewReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload>
          }
          findFirst: {
            args: Prisma.InterviewReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InterviewReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload>
          }
          findMany: {
            args: Prisma.InterviewReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload>[]
          }
          create: {
            args: Prisma.InterviewReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload>
          }
          createMany: {
            args: Prisma.InterviewReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InterviewReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload>[]
          }
          delete: {
            args: Prisma.InterviewReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload>
          }
          update: {
            args: Prisma.InterviewReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload>
          }
          deleteMany: {
            args: Prisma.InterviewReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InterviewReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InterviewReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload>[]
          }
          upsert: {
            args: Prisma.InterviewReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewReportPayload>
          }
          aggregate: {
            args: Prisma.InterviewReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInterviewReport>
          }
          groupBy: {
            args: Prisma.InterviewReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<InterviewReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.InterviewReportCountArgs<ExtArgs>
            result: $Utils.Optional<InterviewReportCountAggregateOutputType> | number
          }
        }
      }
      ResumeProfile: {
        payload: Prisma.$ResumeProfilePayload<ExtArgs>
        fields: Prisma.ResumeProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload>
          }
          findFirst: {
            args: Prisma.ResumeProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload>
          }
          findMany: {
            args: Prisma.ResumeProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload>[]
          }
          create: {
            args: Prisma.ResumeProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload>
          }
          createMany: {
            args: Prisma.ResumeProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload>[]
          }
          delete: {
            args: Prisma.ResumeProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload>
          }
          update: {
            args: Prisma.ResumeProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload>
          }
          deleteMany: {
            args: Prisma.ResumeProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload>[]
          }
          upsert: {
            args: Prisma.ResumeProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeProfilePayload>
          }
          aggregate: {
            args: Prisma.ResumeProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeProfile>
          }
          groupBy: {
            args: Prisma.ResumeProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeProfileCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    subaccount?: SubaccountOmit
    interaction?: InteractionOmit
    interviewReport?: InterviewReportOmit
    resumeProfile?: ResumeProfileOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    subaccounts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccounts?: boolean | UserCountOutputTypeCountSubaccountsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubaccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubaccountWhereInput
  }


  /**
   * Count Type SubaccountCountOutputType
   */

  export type SubaccountCountOutputType = {
    interactions: number
    interviews: number
    resumes: number
  }

  export type SubaccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    interactions?: boolean | SubaccountCountOutputTypeCountInteractionsArgs
    interviews?: boolean | SubaccountCountOutputTypeCountInterviewsArgs
    resumes?: boolean | SubaccountCountOutputTypeCountResumesArgs
  }

  // Custom InputTypes
  /**
   * SubaccountCountOutputType without action
   */
  export type SubaccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubaccountCountOutputType
     */
    select?: SubaccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubaccountCountOutputType without action
   */
  export type SubaccountCountOutputTypeCountInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteractionWhereInput
  }

  /**
   * SubaccountCountOutputType without action
   */
  export type SubaccountCountOutputTypeCountInterviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewReportWhereInput
  }

  /**
   * SubaccountCountOutputType without action
   */
  export type SubaccountCountOutputTypeCountResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeProfileWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subaccounts?: boolean | User$subaccountsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccounts?: boolean | User$subaccountsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      subaccounts: Prisma.$SubaccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subaccounts<T extends User$subaccountsArgs<ExtArgs> = {}>(args?: Subset<T, User$subaccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.subaccounts
   */
  export type User$subaccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
    where?: SubaccountWhereInput
    orderBy?: SubaccountOrderByWithRelationInput | SubaccountOrderByWithRelationInput[]
    cursor?: SubaccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubaccountScalarFieldEnum | SubaccountScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Subaccount
   */

  export type AggregateSubaccount = {
    _count: SubaccountCountAggregateOutputType | null
    _min: SubaccountMinAggregateOutputType | null
    _max: SubaccountMaxAggregateOutputType | null
  }

  export type SubaccountMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubaccountMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubaccountCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubaccountMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubaccountMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubaccountCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubaccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subaccount to aggregate.
     */
    where?: SubaccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subaccounts to fetch.
     */
    orderBy?: SubaccountOrderByWithRelationInput | SubaccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubaccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subaccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subaccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subaccounts
    **/
    _count?: true | SubaccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubaccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubaccountMaxAggregateInputType
  }

  export type GetSubaccountAggregateType<T extends SubaccountAggregateArgs> = {
        [P in keyof T & keyof AggregateSubaccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubaccount[P]>
      : GetScalarType<T[P], AggregateSubaccount[P]>
  }




  export type SubaccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubaccountWhereInput
    orderBy?: SubaccountOrderByWithAggregationInput | SubaccountOrderByWithAggregationInput[]
    by: SubaccountScalarFieldEnum[] | SubaccountScalarFieldEnum
    having?: SubaccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubaccountCountAggregateInputType | true
    _min?: SubaccountMinAggregateInputType
    _max?: SubaccountMaxAggregateInputType
  }

  export type SubaccountGroupByOutputType = {
    id: string
    name: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: SubaccountCountAggregateOutputType | null
    _min: SubaccountMinAggregateOutputType | null
    _max: SubaccountMaxAggregateOutputType | null
  }

  type GetSubaccountGroupByPayload<T extends SubaccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubaccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubaccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubaccountGroupByOutputType[P]>
            : GetScalarType<T[P], SubaccountGroupByOutputType[P]>
        }
      >
    >


  export type SubaccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    interactions?: boolean | Subaccount$interactionsArgs<ExtArgs>
    interviews?: boolean | Subaccount$interviewsArgs<ExtArgs>
    resumes?: boolean | Subaccount$resumesArgs<ExtArgs>
    _count?: boolean | SubaccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subaccount"]>

  export type SubaccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subaccount"]>

  export type SubaccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subaccount"]>

  export type SubaccountSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubaccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["subaccount"]>
  export type SubaccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    interactions?: boolean | Subaccount$interactionsArgs<ExtArgs>
    interviews?: boolean | Subaccount$interviewsArgs<ExtArgs>
    resumes?: boolean | Subaccount$resumesArgs<ExtArgs>
    _count?: boolean | SubaccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubaccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubaccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubaccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subaccount"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      interactions: Prisma.$InteractionPayload<ExtArgs>[]
      interviews: Prisma.$InterviewReportPayload<ExtArgs>[]
      resumes: Prisma.$ResumeProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subaccount"]>
    composites: {}
  }

  type SubaccountGetPayload<S extends boolean | null | undefined | SubaccountDefaultArgs> = $Result.GetResult<Prisma.$SubaccountPayload, S>

  type SubaccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubaccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubaccountCountAggregateInputType | true
    }

  export interface SubaccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subaccount'], meta: { name: 'Subaccount' } }
    /**
     * Find zero or one Subaccount that matches the filter.
     * @param {SubaccountFindUniqueArgs} args - Arguments to find a Subaccount
     * @example
     * // Get one Subaccount
     * const subaccount = await prisma.subaccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubaccountFindUniqueArgs>(args: SelectSubset<T, SubaccountFindUniqueArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subaccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubaccountFindUniqueOrThrowArgs} args - Arguments to find a Subaccount
     * @example
     * // Get one Subaccount
     * const subaccount = await prisma.subaccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubaccountFindUniqueOrThrowArgs>(args: SelectSubset<T, SubaccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subaccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubaccountFindFirstArgs} args - Arguments to find a Subaccount
     * @example
     * // Get one Subaccount
     * const subaccount = await prisma.subaccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubaccountFindFirstArgs>(args?: SelectSubset<T, SubaccountFindFirstArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subaccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubaccountFindFirstOrThrowArgs} args - Arguments to find a Subaccount
     * @example
     * // Get one Subaccount
     * const subaccount = await prisma.subaccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubaccountFindFirstOrThrowArgs>(args?: SelectSubset<T, SubaccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subaccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubaccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subaccounts
     * const subaccounts = await prisma.subaccount.findMany()
     * 
     * // Get first 10 Subaccounts
     * const subaccounts = await prisma.subaccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subaccountWithIdOnly = await prisma.subaccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubaccountFindManyArgs>(args?: SelectSubset<T, SubaccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subaccount.
     * @param {SubaccountCreateArgs} args - Arguments to create a Subaccount.
     * @example
     * // Create one Subaccount
     * const Subaccount = await prisma.subaccount.create({
     *   data: {
     *     // ... data to create a Subaccount
     *   }
     * })
     * 
     */
    create<T extends SubaccountCreateArgs>(args: SelectSubset<T, SubaccountCreateArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subaccounts.
     * @param {SubaccountCreateManyArgs} args - Arguments to create many Subaccounts.
     * @example
     * // Create many Subaccounts
     * const subaccount = await prisma.subaccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubaccountCreateManyArgs>(args?: SelectSubset<T, SubaccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subaccounts and returns the data saved in the database.
     * @param {SubaccountCreateManyAndReturnArgs} args - Arguments to create many Subaccounts.
     * @example
     * // Create many Subaccounts
     * const subaccount = await prisma.subaccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subaccounts and only return the `id`
     * const subaccountWithIdOnly = await prisma.subaccount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubaccountCreateManyAndReturnArgs>(args?: SelectSubset<T, SubaccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subaccount.
     * @param {SubaccountDeleteArgs} args - Arguments to delete one Subaccount.
     * @example
     * // Delete one Subaccount
     * const Subaccount = await prisma.subaccount.delete({
     *   where: {
     *     // ... filter to delete one Subaccount
     *   }
     * })
     * 
     */
    delete<T extends SubaccountDeleteArgs>(args: SelectSubset<T, SubaccountDeleteArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subaccount.
     * @param {SubaccountUpdateArgs} args - Arguments to update one Subaccount.
     * @example
     * // Update one Subaccount
     * const subaccount = await prisma.subaccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubaccountUpdateArgs>(args: SelectSubset<T, SubaccountUpdateArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subaccounts.
     * @param {SubaccountDeleteManyArgs} args - Arguments to filter Subaccounts to delete.
     * @example
     * // Delete a few Subaccounts
     * const { count } = await prisma.subaccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubaccountDeleteManyArgs>(args?: SelectSubset<T, SubaccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subaccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubaccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subaccounts
     * const subaccount = await prisma.subaccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubaccountUpdateManyArgs>(args: SelectSubset<T, SubaccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subaccounts and returns the data updated in the database.
     * @param {SubaccountUpdateManyAndReturnArgs} args - Arguments to update many Subaccounts.
     * @example
     * // Update many Subaccounts
     * const subaccount = await prisma.subaccount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subaccounts and only return the `id`
     * const subaccountWithIdOnly = await prisma.subaccount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubaccountUpdateManyAndReturnArgs>(args: SelectSubset<T, SubaccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subaccount.
     * @param {SubaccountUpsertArgs} args - Arguments to update or create a Subaccount.
     * @example
     * // Update or create a Subaccount
     * const subaccount = await prisma.subaccount.upsert({
     *   create: {
     *     // ... data to create a Subaccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subaccount we want to update
     *   }
     * })
     */
    upsert<T extends SubaccountUpsertArgs>(args: SelectSubset<T, SubaccountUpsertArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subaccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubaccountCountArgs} args - Arguments to filter Subaccounts to count.
     * @example
     * // Count the number of Subaccounts
     * const count = await prisma.subaccount.count({
     *   where: {
     *     // ... the filter for the Subaccounts we want to count
     *   }
     * })
    **/
    count<T extends SubaccountCountArgs>(
      args?: Subset<T, SubaccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubaccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subaccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubaccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubaccountAggregateArgs>(args: Subset<T, SubaccountAggregateArgs>): Prisma.PrismaPromise<GetSubaccountAggregateType<T>>

    /**
     * Group by Subaccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubaccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubaccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubaccountGroupByArgs['orderBy'] }
        : { orderBy?: SubaccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubaccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubaccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subaccount model
   */
  readonly fields: SubaccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subaccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubaccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    interactions<T extends Subaccount$interactionsArgs<ExtArgs> = {}>(args?: Subset<T, Subaccount$interactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interviews<T extends Subaccount$interviewsArgs<ExtArgs> = {}>(args?: Subset<T, Subaccount$interviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumes<T extends Subaccount$resumesArgs<ExtArgs> = {}>(args?: Subset<T, Subaccount$resumesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subaccount model
   */
  interface SubaccountFieldRefs {
    readonly id: FieldRef<"Subaccount", 'String'>
    readonly name: FieldRef<"Subaccount", 'String'>
    readonly userId: FieldRef<"Subaccount", 'String'>
    readonly createdAt: FieldRef<"Subaccount", 'DateTime'>
    readonly updatedAt: FieldRef<"Subaccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subaccount findUnique
   */
  export type SubaccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
    /**
     * Filter, which Subaccount to fetch.
     */
    where: SubaccountWhereUniqueInput
  }

  /**
   * Subaccount findUniqueOrThrow
   */
  export type SubaccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
    /**
     * Filter, which Subaccount to fetch.
     */
    where: SubaccountWhereUniqueInput
  }

  /**
   * Subaccount findFirst
   */
  export type SubaccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
    /**
     * Filter, which Subaccount to fetch.
     */
    where?: SubaccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subaccounts to fetch.
     */
    orderBy?: SubaccountOrderByWithRelationInput | SubaccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subaccounts.
     */
    cursor?: SubaccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subaccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subaccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subaccounts.
     */
    distinct?: SubaccountScalarFieldEnum | SubaccountScalarFieldEnum[]
  }

  /**
   * Subaccount findFirstOrThrow
   */
  export type SubaccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
    /**
     * Filter, which Subaccount to fetch.
     */
    where?: SubaccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subaccounts to fetch.
     */
    orderBy?: SubaccountOrderByWithRelationInput | SubaccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subaccounts.
     */
    cursor?: SubaccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subaccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subaccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subaccounts.
     */
    distinct?: SubaccountScalarFieldEnum | SubaccountScalarFieldEnum[]
  }

  /**
   * Subaccount findMany
   */
  export type SubaccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
    /**
     * Filter, which Subaccounts to fetch.
     */
    where?: SubaccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subaccounts to fetch.
     */
    orderBy?: SubaccountOrderByWithRelationInput | SubaccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subaccounts.
     */
    cursor?: SubaccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subaccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subaccounts.
     */
    skip?: number
    distinct?: SubaccountScalarFieldEnum | SubaccountScalarFieldEnum[]
  }

  /**
   * Subaccount create
   */
  export type SubaccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Subaccount.
     */
    data: XOR<SubaccountCreateInput, SubaccountUncheckedCreateInput>
  }

  /**
   * Subaccount createMany
   */
  export type SubaccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subaccounts.
     */
    data: SubaccountCreateManyInput | SubaccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subaccount createManyAndReturn
   */
  export type SubaccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * The data used to create many Subaccounts.
     */
    data: SubaccountCreateManyInput | SubaccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subaccount update
   */
  export type SubaccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Subaccount.
     */
    data: XOR<SubaccountUpdateInput, SubaccountUncheckedUpdateInput>
    /**
     * Choose, which Subaccount to update.
     */
    where: SubaccountWhereUniqueInput
  }

  /**
   * Subaccount updateMany
   */
  export type SubaccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subaccounts.
     */
    data: XOR<SubaccountUpdateManyMutationInput, SubaccountUncheckedUpdateManyInput>
    /**
     * Filter which Subaccounts to update
     */
    where?: SubaccountWhereInput
    /**
     * Limit how many Subaccounts to update.
     */
    limit?: number
  }

  /**
   * Subaccount updateManyAndReturn
   */
  export type SubaccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * The data used to update Subaccounts.
     */
    data: XOR<SubaccountUpdateManyMutationInput, SubaccountUncheckedUpdateManyInput>
    /**
     * Filter which Subaccounts to update
     */
    where?: SubaccountWhereInput
    /**
     * Limit how many Subaccounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subaccount upsert
   */
  export type SubaccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Subaccount to update in case it exists.
     */
    where: SubaccountWhereUniqueInput
    /**
     * In case the Subaccount found by the `where` argument doesn't exist, create a new Subaccount with this data.
     */
    create: XOR<SubaccountCreateInput, SubaccountUncheckedCreateInput>
    /**
     * In case the Subaccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubaccountUpdateInput, SubaccountUncheckedUpdateInput>
  }

  /**
   * Subaccount delete
   */
  export type SubaccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
    /**
     * Filter which Subaccount to delete.
     */
    where: SubaccountWhereUniqueInput
  }

  /**
   * Subaccount deleteMany
   */
  export type SubaccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subaccounts to delete
     */
    where?: SubaccountWhereInput
    /**
     * Limit how many Subaccounts to delete.
     */
    limit?: number
  }

  /**
   * Subaccount.interactions
   */
  export type Subaccount$interactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    where?: InteractionWhereInput
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    cursor?: InteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Subaccount.interviews
   */
  export type Subaccount$interviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
    where?: InterviewReportWhereInput
    orderBy?: InterviewReportOrderByWithRelationInput | InterviewReportOrderByWithRelationInput[]
    cursor?: InterviewReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterviewReportScalarFieldEnum | InterviewReportScalarFieldEnum[]
  }

  /**
   * Subaccount.resumes
   */
  export type Subaccount$resumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
    where?: ResumeProfileWhereInput
    orderBy?: ResumeProfileOrderByWithRelationInput | ResumeProfileOrderByWithRelationInput[]
    cursor?: ResumeProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeProfileScalarFieldEnum | ResumeProfileScalarFieldEnum[]
  }

  /**
   * Subaccount without action
   */
  export type SubaccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subaccount
     */
    select?: SubaccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subaccount
     */
    omit?: SubaccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubaccountInclude<ExtArgs> | null
  }


  /**
   * Model Interaction
   */

  export type AggregateInteraction = {
    _count: InteractionCountAggregateOutputType | null
    _min: InteractionMinAggregateOutputType | null
    _max: InteractionMaxAggregateOutputType | null
  }

  export type InteractionMinAggregateOutputType = {
    id: string | null
    subaccountId: string | null
    type: string | null
    content: string | null
    createdAt: Date | null
  }

  export type InteractionMaxAggregateOutputType = {
    id: string | null
    subaccountId: string | null
    type: string | null
    content: string | null
    createdAt: Date | null
  }

  export type InteractionCountAggregateOutputType = {
    id: number
    subaccountId: number
    type: number
    content: number
    createdAt: number
    _all: number
  }


  export type InteractionMinAggregateInputType = {
    id?: true
    subaccountId?: true
    type?: true
    content?: true
    createdAt?: true
  }

  export type InteractionMaxAggregateInputType = {
    id?: true
    subaccountId?: true
    type?: true
    content?: true
    createdAt?: true
  }

  export type InteractionCountAggregateInputType = {
    id?: true
    subaccountId?: true
    type?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type InteractionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interaction to aggregate.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Interactions
    **/
    _count?: true | InteractionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InteractionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InteractionMaxAggregateInputType
  }

  export type GetInteractionAggregateType<T extends InteractionAggregateArgs> = {
        [P in keyof T & keyof AggregateInteraction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInteraction[P]>
      : GetScalarType<T[P], AggregateInteraction[P]>
  }




  export type InteractionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteractionWhereInput
    orderBy?: InteractionOrderByWithAggregationInput | InteractionOrderByWithAggregationInput[]
    by: InteractionScalarFieldEnum[] | InteractionScalarFieldEnum
    having?: InteractionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InteractionCountAggregateInputType | true
    _min?: InteractionMinAggregateInputType
    _max?: InteractionMaxAggregateInputType
  }

  export type InteractionGroupByOutputType = {
    id: string
    subaccountId: string
    type: string
    content: string
    createdAt: Date
    _count: InteractionCountAggregateOutputType | null
    _min: InteractionMinAggregateOutputType | null
    _max: InteractionMaxAggregateOutputType | null
  }

  type GetInteractionGroupByPayload<T extends InteractionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InteractionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InteractionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InteractionGroupByOutputType[P]>
            : GetScalarType<T[P], InteractionGroupByOutputType[P]>
        }
      >
    >


  export type InteractionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subaccountId?: boolean
    type?: boolean
    content?: boolean
    createdAt?: boolean
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interaction"]>

  export type InteractionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subaccountId?: boolean
    type?: boolean
    content?: boolean
    createdAt?: boolean
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interaction"]>

  export type InteractionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subaccountId?: boolean
    type?: boolean
    content?: boolean
    createdAt?: boolean
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interaction"]>

  export type InteractionSelectScalar = {
    id?: boolean
    subaccountId?: boolean
    type?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type InteractionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subaccountId" | "type" | "content" | "createdAt", ExtArgs["result"]["interaction"]>
  export type InteractionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }
  export type InteractionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }
  export type InteractionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }

  export type $InteractionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Interaction"
    objects: {
      subaccount: Prisma.$SubaccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subaccountId: string
      type: string
      content: string
      createdAt: Date
    }, ExtArgs["result"]["interaction"]>
    composites: {}
  }

  type InteractionGetPayload<S extends boolean | null | undefined | InteractionDefaultArgs> = $Result.GetResult<Prisma.$InteractionPayload, S>

  type InteractionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InteractionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InteractionCountAggregateInputType | true
    }

  export interface InteractionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Interaction'], meta: { name: 'Interaction' } }
    /**
     * Find zero or one Interaction that matches the filter.
     * @param {InteractionFindUniqueArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InteractionFindUniqueArgs>(args: SelectSubset<T, InteractionFindUniqueArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Interaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InteractionFindUniqueOrThrowArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InteractionFindUniqueOrThrowArgs>(args: SelectSubset<T, InteractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionFindFirstArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InteractionFindFirstArgs>(args?: SelectSubset<T, InteractionFindFirstArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionFindFirstOrThrowArgs} args - Arguments to find a Interaction
     * @example
     * // Get one Interaction
     * const interaction = await prisma.interaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InteractionFindFirstOrThrowArgs>(args?: SelectSubset<T, InteractionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Interactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Interactions
     * const interactions = await prisma.interaction.findMany()
     * 
     * // Get first 10 Interactions
     * const interactions = await prisma.interaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interactionWithIdOnly = await prisma.interaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InteractionFindManyArgs>(args?: SelectSubset<T, InteractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Interaction.
     * @param {InteractionCreateArgs} args - Arguments to create a Interaction.
     * @example
     * // Create one Interaction
     * const Interaction = await prisma.interaction.create({
     *   data: {
     *     // ... data to create a Interaction
     *   }
     * })
     * 
     */
    create<T extends InteractionCreateArgs>(args: SelectSubset<T, InteractionCreateArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Interactions.
     * @param {InteractionCreateManyArgs} args - Arguments to create many Interactions.
     * @example
     * // Create many Interactions
     * const interaction = await prisma.interaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InteractionCreateManyArgs>(args?: SelectSubset<T, InteractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Interactions and returns the data saved in the database.
     * @param {InteractionCreateManyAndReturnArgs} args - Arguments to create many Interactions.
     * @example
     * // Create many Interactions
     * const interaction = await prisma.interaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Interactions and only return the `id`
     * const interactionWithIdOnly = await prisma.interaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InteractionCreateManyAndReturnArgs>(args?: SelectSubset<T, InteractionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Interaction.
     * @param {InteractionDeleteArgs} args - Arguments to delete one Interaction.
     * @example
     * // Delete one Interaction
     * const Interaction = await prisma.interaction.delete({
     *   where: {
     *     // ... filter to delete one Interaction
     *   }
     * })
     * 
     */
    delete<T extends InteractionDeleteArgs>(args: SelectSubset<T, InteractionDeleteArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Interaction.
     * @param {InteractionUpdateArgs} args - Arguments to update one Interaction.
     * @example
     * // Update one Interaction
     * const interaction = await prisma.interaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InteractionUpdateArgs>(args: SelectSubset<T, InteractionUpdateArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Interactions.
     * @param {InteractionDeleteManyArgs} args - Arguments to filter Interactions to delete.
     * @example
     * // Delete a few Interactions
     * const { count } = await prisma.interaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InteractionDeleteManyArgs>(args?: SelectSubset<T, InteractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Interactions
     * const interaction = await prisma.interaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InteractionUpdateManyArgs>(args: SelectSubset<T, InteractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interactions and returns the data updated in the database.
     * @param {InteractionUpdateManyAndReturnArgs} args - Arguments to update many Interactions.
     * @example
     * // Update many Interactions
     * const interaction = await prisma.interaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Interactions and only return the `id`
     * const interactionWithIdOnly = await prisma.interaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InteractionUpdateManyAndReturnArgs>(args: SelectSubset<T, InteractionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Interaction.
     * @param {InteractionUpsertArgs} args - Arguments to update or create a Interaction.
     * @example
     * // Update or create a Interaction
     * const interaction = await prisma.interaction.upsert({
     *   create: {
     *     // ... data to create a Interaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Interaction we want to update
     *   }
     * })
     */
    upsert<T extends InteractionUpsertArgs>(args: SelectSubset<T, InteractionUpsertArgs<ExtArgs>>): Prisma__InteractionClient<$Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Interactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionCountArgs} args - Arguments to filter Interactions to count.
     * @example
     * // Count the number of Interactions
     * const count = await prisma.interaction.count({
     *   where: {
     *     // ... the filter for the Interactions we want to count
     *   }
     * })
    **/
    count<T extends InteractionCountArgs>(
      args?: Subset<T, InteractionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InteractionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Interaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InteractionAggregateArgs>(args: Subset<T, InteractionAggregateArgs>): Prisma.PrismaPromise<GetInteractionAggregateType<T>>

    /**
     * Group by Interaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteractionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InteractionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InteractionGroupByArgs['orderBy'] }
        : { orderBy?: InteractionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InteractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInteractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Interaction model
   */
  readonly fields: InteractionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Interaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InteractionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subaccount<T extends SubaccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubaccountDefaultArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Interaction model
   */
  interface InteractionFieldRefs {
    readonly id: FieldRef<"Interaction", 'String'>
    readonly subaccountId: FieldRef<"Interaction", 'String'>
    readonly type: FieldRef<"Interaction", 'String'>
    readonly content: FieldRef<"Interaction", 'String'>
    readonly createdAt: FieldRef<"Interaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Interaction findUnique
   */
  export type InteractionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction findUniqueOrThrow
   */
  export type InteractionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction findFirst
   */
  export type InteractionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interactions.
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interactions.
     */
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Interaction findFirstOrThrow
   */
  export type InteractionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interaction to fetch.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interactions.
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interactions.
     */
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Interaction findMany
   */
  export type InteractionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter, which Interactions to fetch.
     */
    where?: InteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interactions to fetch.
     */
    orderBy?: InteractionOrderByWithRelationInput | InteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Interactions.
     */
    cursor?: InteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interactions.
     */
    skip?: number
    distinct?: InteractionScalarFieldEnum | InteractionScalarFieldEnum[]
  }

  /**
   * Interaction create
   */
  export type InteractionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * The data needed to create a Interaction.
     */
    data: XOR<InteractionCreateInput, InteractionUncheckedCreateInput>
  }

  /**
   * Interaction createMany
   */
  export type InteractionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Interactions.
     */
    data: InteractionCreateManyInput | InteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Interaction createManyAndReturn
   */
  export type InteractionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * The data used to create many Interactions.
     */
    data: InteractionCreateManyInput | InteractionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interaction update
   */
  export type InteractionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * The data needed to update a Interaction.
     */
    data: XOR<InteractionUpdateInput, InteractionUncheckedUpdateInput>
    /**
     * Choose, which Interaction to update.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction updateMany
   */
  export type InteractionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Interactions.
     */
    data: XOR<InteractionUpdateManyMutationInput, InteractionUncheckedUpdateManyInput>
    /**
     * Filter which Interactions to update
     */
    where?: InteractionWhereInput
    /**
     * Limit how many Interactions to update.
     */
    limit?: number
  }

  /**
   * Interaction updateManyAndReturn
   */
  export type InteractionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * The data used to update Interactions.
     */
    data: XOR<InteractionUpdateManyMutationInput, InteractionUncheckedUpdateManyInput>
    /**
     * Filter which Interactions to update
     */
    where?: InteractionWhereInput
    /**
     * Limit how many Interactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Interaction upsert
   */
  export type InteractionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * The filter to search for the Interaction to update in case it exists.
     */
    where: InteractionWhereUniqueInput
    /**
     * In case the Interaction found by the `where` argument doesn't exist, create a new Interaction with this data.
     */
    create: XOR<InteractionCreateInput, InteractionUncheckedCreateInput>
    /**
     * In case the Interaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InteractionUpdateInput, InteractionUncheckedUpdateInput>
  }

  /**
   * Interaction delete
   */
  export type InteractionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
    /**
     * Filter which Interaction to delete.
     */
    where: InteractionWhereUniqueInput
  }

  /**
   * Interaction deleteMany
   */
  export type InteractionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interactions to delete
     */
    where?: InteractionWhereInput
    /**
     * Limit how many Interactions to delete.
     */
    limit?: number
  }

  /**
   * Interaction without action
   */
  export type InteractionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interaction
     */
    select?: InteractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interaction
     */
    omit?: InteractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteractionInclude<ExtArgs> | null
  }


  /**
   * Model InterviewReport
   */

  export type AggregateInterviewReport = {
    _count: InterviewReportCountAggregateOutputType | null
    _avg: InterviewReportAvgAggregateOutputType | null
    _sum: InterviewReportSumAggregateOutputType | null
    _min: InterviewReportMinAggregateOutputType | null
    _max: InterviewReportMaxAggregateOutputType | null
  }

  export type InterviewReportAvgAggregateOutputType = {
    score: number | null
  }

  export type InterviewReportSumAggregateOutputType = {
    score: number | null
  }

  export type InterviewReportMinAggregateOutputType = {
    id: string | null
    subaccountId: string | null
    role: string | null
    questions: string | null
    answers: string | null
    evaluation: string | null
    score: number | null
    createdAt: Date | null
  }

  export type InterviewReportMaxAggregateOutputType = {
    id: string | null
    subaccountId: string | null
    role: string | null
    questions: string | null
    answers: string | null
    evaluation: string | null
    score: number | null
    createdAt: Date | null
  }

  export type InterviewReportCountAggregateOutputType = {
    id: number
    subaccountId: number
    role: number
    questions: number
    answers: number
    evaluation: number
    score: number
    createdAt: number
    _all: number
  }


  export type InterviewReportAvgAggregateInputType = {
    score?: true
  }

  export type InterviewReportSumAggregateInputType = {
    score?: true
  }

  export type InterviewReportMinAggregateInputType = {
    id?: true
    subaccountId?: true
    role?: true
    questions?: true
    answers?: true
    evaluation?: true
    score?: true
    createdAt?: true
  }

  export type InterviewReportMaxAggregateInputType = {
    id?: true
    subaccountId?: true
    role?: true
    questions?: true
    answers?: true
    evaluation?: true
    score?: true
    createdAt?: true
  }

  export type InterviewReportCountAggregateInputType = {
    id?: true
    subaccountId?: true
    role?: true
    questions?: true
    answers?: true
    evaluation?: true
    score?: true
    createdAt?: true
    _all?: true
  }

  export type InterviewReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InterviewReport to aggregate.
     */
    where?: InterviewReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewReports to fetch.
     */
    orderBy?: InterviewReportOrderByWithRelationInput | InterviewReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InterviewReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InterviewReports
    **/
    _count?: true | InterviewReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InterviewReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InterviewReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InterviewReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InterviewReportMaxAggregateInputType
  }

  export type GetInterviewReportAggregateType<T extends InterviewReportAggregateArgs> = {
        [P in keyof T & keyof AggregateInterviewReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInterviewReport[P]>
      : GetScalarType<T[P], AggregateInterviewReport[P]>
  }




  export type InterviewReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewReportWhereInput
    orderBy?: InterviewReportOrderByWithAggregationInput | InterviewReportOrderByWithAggregationInput[]
    by: InterviewReportScalarFieldEnum[] | InterviewReportScalarFieldEnum
    having?: InterviewReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InterviewReportCountAggregateInputType | true
    _avg?: InterviewReportAvgAggregateInputType
    _sum?: InterviewReportSumAggregateInputType
    _min?: InterviewReportMinAggregateInputType
    _max?: InterviewReportMaxAggregateInputType
  }

  export type InterviewReportGroupByOutputType = {
    id: string
    subaccountId: string
    role: string
    questions: string
    answers: string
    evaluation: string
    score: number
    createdAt: Date
    _count: InterviewReportCountAggregateOutputType | null
    _avg: InterviewReportAvgAggregateOutputType | null
    _sum: InterviewReportSumAggregateOutputType | null
    _min: InterviewReportMinAggregateOutputType | null
    _max: InterviewReportMaxAggregateOutputType | null
  }

  type GetInterviewReportGroupByPayload<T extends InterviewReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InterviewReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InterviewReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InterviewReportGroupByOutputType[P]>
            : GetScalarType<T[P], InterviewReportGroupByOutputType[P]>
        }
      >
    >


  export type InterviewReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subaccountId?: boolean
    role?: boolean
    questions?: boolean
    answers?: boolean
    evaluation?: boolean
    score?: boolean
    createdAt?: boolean
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interviewReport"]>

  export type InterviewReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subaccountId?: boolean
    role?: boolean
    questions?: boolean
    answers?: boolean
    evaluation?: boolean
    score?: boolean
    createdAt?: boolean
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interviewReport"]>

  export type InterviewReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subaccountId?: boolean
    role?: boolean
    questions?: boolean
    answers?: boolean
    evaluation?: boolean
    score?: boolean
    createdAt?: boolean
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interviewReport"]>

  export type InterviewReportSelectScalar = {
    id?: boolean
    subaccountId?: boolean
    role?: boolean
    questions?: boolean
    answers?: boolean
    evaluation?: boolean
    score?: boolean
    createdAt?: boolean
  }

  export type InterviewReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subaccountId" | "role" | "questions" | "answers" | "evaluation" | "score" | "createdAt", ExtArgs["result"]["interviewReport"]>
  export type InterviewReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }
  export type InterviewReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }
  export type InterviewReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }

  export type $InterviewReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InterviewReport"
    objects: {
      subaccount: Prisma.$SubaccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subaccountId: string
      role: string
      questions: string
      answers: string
      evaluation: string
      score: number
      createdAt: Date
    }, ExtArgs["result"]["interviewReport"]>
    composites: {}
  }

  type InterviewReportGetPayload<S extends boolean | null | undefined | InterviewReportDefaultArgs> = $Result.GetResult<Prisma.$InterviewReportPayload, S>

  type InterviewReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InterviewReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InterviewReportCountAggregateInputType | true
    }

  export interface InterviewReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InterviewReport'], meta: { name: 'InterviewReport' } }
    /**
     * Find zero or one InterviewReport that matches the filter.
     * @param {InterviewReportFindUniqueArgs} args - Arguments to find a InterviewReport
     * @example
     * // Get one InterviewReport
     * const interviewReport = await prisma.interviewReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InterviewReportFindUniqueArgs>(args: SelectSubset<T, InterviewReportFindUniqueArgs<ExtArgs>>): Prisma__InterviewReportClient<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InterviewReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InterviewReportFindUniqueOrThrowArgs} args - Arguments to find a InterviewReport
     * @example
     * // Get one InterviewReport
     * const interviewReport = await prisma.interviewReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InterviewReportFindUniqueOrThrowArgs>(args: SelectSubset<T, InterviewReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InterviewReportClient<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InterviewReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewReportFindFirstArgs} args - Arguments to find a InterviewReport
     * @example
     * // Get one InterviewReport
     * const interviewReport = await prisma.interviewReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InterviewReportFindFirstArgs>(args?: SelectSubset<T, InterviewReportFindFirstArgs<ExtArgs>>): Prisma__InterviewReportClient<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InterviewReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewReportFindFirstOrThrowArgs} args - Arguments to find a InterviewReport
     * @example
     * // Get one InterviewReport
     * const interviewReport = await prisma.interviewReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InterviewReportFindFirstOrThrowArgs>(args?: SelectSubset<T, InterviewReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__InterviewReportClient<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InterviewReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InterviewReports
     * const interviewReports = await prisma.interviewReport.findMany()
     * 
     * // Get first 10 InterviewReports
     * const interviewReports = await prisma.interviewReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interviewReportWithIdOnly = await prisma.interviewReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InterviewReportFindManyArgs>(args?: SelectSubset<T, InterviewReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InterviewReport.
     * @param {InterviewReportCreateArgs} args - Arguments to create a InterviewReport.
     * @example
     * // Create one InterviewReport
     * const InterviewReport = await prisma.interviewReport.create({
     *   data: {
     *     // ... data to create a InterviewReport
     *   }
     * })
     * 
     */
    create<T extends InterviewReportCreateArgs>(args: SelectSubset<T, InterviewReportCreateArgs<ExtArgs>>): Prisma__InterviewReportClient<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InterviewReports.
     * @param {InterviewReportCreateManyArgs} args - Arguments to create many InterviewReports.
     * @example
     * // Create many InterviewReports
     * const interviewReport = await prisma.interviewReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InterviewReportCreateManyArgs>(args?: SelectSubset<T, InterviewReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InterviewReports and returns the data saved in the database.
     * @param {InterviewReportCreateManyAndReturnArgs} args - Arguments to create many InterviewReports.
     * @example
     * // Create many InterviewReports
     * const interviewReport = await prisma.interviewReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InterviewReports and only return the `id`
     * const interviewReportWithIdOnly = await prisma.interviewReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InterviewReportCreateManyAndReturnArgs>(args?: SelectSubset<T, InterviewReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InterviewReport.
     * @param {InterviewReportDeleteArgs} args - Arguments to delete one InterviewReport.
     * @example
     * // Delete one InterviewReport
     * const InterviewReport = await prisma.interviewReport.delete({
     *   where: {
     *     // ... filter to delete one InterviewReport
     *   }
     * })
     * 
     */
    delete<T extends InterviewReportDeleteArgs>(args: SelectSubset<T, InterviewReportDeleteArgs<ExtArgs>>): Prisma__InterviewReportClient<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InterviewReport.
     * @param {InterviewReportUpdateArgs} args - Arguments to update one InterviewReport.
     * @example
     * // Update one InterviewReport
     * const interviewReport = await prisma.interviewReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InterviewReportUpdateArgs>(args: SelectSubset<T, InterviewReportUpdateArgs<ExtArgs>>): Prisma__InterviewReportClient<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InterviewReports.
     * @param {InterviewReportDeleteManyArgs} args - Arguments to filter InterviewReports to delete.
     * @example
     * // Delete a few InterviewReports
     * const { count } = await prisma.interviewReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InterviewReportDeleteManyArgs>(args?: SelectSubset<T, InterviewReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InterviewReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InterviewReports
     * const interviewReport = await prisma.interviewReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InterviewReportUpdateManyArgs>(args: SelectSubset<T, InterviewReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InterviewReports and returns the data updated in the database.
     * @param {InterviewReportUpdateManyAndReturnArgs} args - Arguments to update many InterviewReports.
     * @example
     * // Update many InterviewReports
     * const interviewReport = await prisma.interviewReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InterviewReports and only return the `id`
     * const interviewReportWithIdOnly = await prisma.interviewReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InterviewReportUpdateManyAndReturnArgs>(args: SelectSubset<T, InterviewReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InterviewReport.
     * @param {InterviewReportUpsertArgs} args - Arguments to update or create a InterviewReport.
     * @example
     * // Update or create a InterviewReport
     * const interviewReport = await prisma.interviewReport.upsert({
     *   create: {
     *     // ... data to create a InterviewReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InterviewReport we want to update
     *   }
     * })
     */
    upsert<T extends InterviewReportUpsertArgs>(args: SelectSubset<T, InterviewReportUpsertArgs<ExtArgs>>): Prisma__InterviewReportClient<$Result.GetResult<Prisma.$InterviewReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InterviewReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewReportCountArgs} args - Arguments to filter InterviewReports to count.
     * @example
     * // Count the number of InterviewReports
     * const count = await prisma.interviewReport.count({
     *   where: {
     *     // ... the filter for the InterviewReports we want to count
     *   }
     * })
    **/
    count<T extends InterviewReportCountArgs>(
      args?: Subset<T, InterviewReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InterviewReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InterviewReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InterviewReportAggregateArgs>(args: Subset<T, InterviewReportAggregateArgs>): Prisma.PrismaPromise<GetInterviewReportAggregateType<T>>

    /**
     * Group by InterviewReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InterviewReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InterviewReportGroupByArgs['orderBy'] }
        : { orderBy?: InterviewReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InterviewReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInterviewReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InterviewReport model
   */
  readonly fields: InterviewReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InterviewReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InterviewReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subaccount<T extends SubaccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubaccountDefaultArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InterviewReport model
   */
  interface InterviewReportFieldRefs {
    readonly id: FieldRef<"InterviewReport", 'String'>
    readonly subaccountId: FieldRef<"InterviewReport", 'String'>
    readonly role: FieldRef<"InterviewReport", 'String'>
    readonly questions: FieldRef<"InterviewReport", 'String'>
    readonly answers: FieldRef<"InterviewReport", 'String'>
    readonly evaluation: FieldRef<"InterviewReport", 'String'>
    readonly score: FieldRef<"InterviewReport", 'Float'>
    readonly createdAt: FieldRef<"InterviewReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InterviewReport findUnique
   */
  export type InterviewReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
    /**
     * Filter, which InterviewReport to fetch.
     */
    where: InterviewReportWhereUniqueInput
  }

  /**
   * InterviewReport findUniqueOrThrow
   */
  export type InterviewReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
    /**
     * Filter, which InterviewReport to fetch.
     */
    where: InterviewReportWhereUniqueInput
  }

  /**
   * InterviewReport findFirst
   */
  export type InterviewReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
    /**
     * Filter, which InterviewReport to fetch.
     */
    where?: InterviewReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewReports to fetch.
     */
    orderBy?: InterviewReportOrderByWithRelationInput | InterviewReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InterviewReports.
     */
    cursor?: InterviewReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InterviewReports.
     */
    distinct?: InterviewReportScalarFieldEnum | InterviewReportScalarFieldEnum[]
  }

  /**
   * InterviewReport findFirstOrThrow
   */
  export type InterviewReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
    /**
     * Filter, which InterviewReport to fetch.
     */
    where?: InterviewReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewReports to fetch.
     */
    orderBy?: InterviewReportOrderByWithRelationInput | InterviewReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InterviewReports.
     */
    cursor?: InterviewReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InterviewReports.
     */
    distinct?: InterviewReportScalarFieldEnum | InterviewReportScalarFieldEnum[]
  }

  /**
   * InterviewReport findMany
   */
  export type InterviewReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
    /**
     * Filter, which InterviewReports to fetch.
     */
    where?: InterviewReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InterviewReports to fetch.
     */
    orderBy?: InterviewReportOrderByWithRelationInput | InterviewReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InterviewReports.
     */
    cursor?: InterviewReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InterviewReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InterviewReports.
     */
    skip?: number
    distinct?: InterviewReportScalarFieldEnum | InterviewReportScalarFieldEnum[]
  }

  /**
   * InterviewReport create
   */
  export type InterviewReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
    /**
     * The data needed to create a InterviewReport.
     */
    data: XOR<InterviewReportCreateInput, InterviewReportUncheckedCreateInput>
  }

  /**
   * InterviewReport createMany
   */
  export type InterviewReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InterviewReports.
     */
    data: InterviewReportCreateManyInput | InterviewReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InterviewReport createManyAndReturn
   */
  export type InterviewReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * The data used to create many InterviewReports.
     */
    data: InterviewReportCreateManyInput | InterviewReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InterviewReport update
   */
  export type InterviewReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
    /**
     * The data needed to update a InterviewReport.
     */
    data: XOR<InterviewReportUpdateInput, InterviewReportUncheckedUpdateInput>
    /**
     * Choose, which InterviewReport to update.
     */
    where: InterviewReportWhereUniqueInput
  }

  /**
   * InterviewReport updateMany
   */
  export type InterviewReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InterviewReports.
     */
    data: XOR<InterviewReportUpdateManyMutationInput, InterviewReportUncheckedUpdateManyInput>
    /**
     * Filter which InterviewReports to update
     */
    where?: InterviewReportWhereInput
    /**
     * Limit how many InterviewReports to update.
     */
    limit?: number
  }

  /**
   * InterviewReport updateManyAndReturn
   */
  export type InterviewReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * The data used to update InterviewReports.
     */
    data: XOR<InterviewReportUpdateManyMutationInput, InterviewReportUncheckedUpdateManyInput>
    /**
     * Filter which InterviewReports to update
     */
    where?: InterviewReportWhereInput
    /**
     * Limit how many InterviewReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InterviewReport upsert
   */
  export type InterviewReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
    /**
     * The filter to search for the InterviewReport to update in case it exists.
     */
    where: InterviewReportWhereUniqueInput
    /**
     * In case the InterviewReport found by the `where` argument doesn't exist, create a new InterviewReport with this data.
     */
    create: XOR<InterviewReportCreateInput, InterviewReportUncheckedCreateInput>
    /**
     * In case the InterviewReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InterviewReportUpdateInput, InterviewReportUncheckedUpdateInput>
  }

  /**
   * InterviewReport delete
   */
  export type InterviewReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
    /**
     * Filter which InterviewReport to delete.
     */
    where: InterviewReportWhereUniqueInput
  }

  /**
   * InterviewReport deleteMany
   */
  export type InterviewReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InterviewReports to delete
     */
    where?: InterviewReportWhereInput
    /**
     * Limit how many InterviewReports to delete.
     */
    limit?: number
  }

  /**
   * InterviewReport without action
   */
  export type InterviewReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InterviewReport
     */
    select?: InterviewReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InterviewReport
     */
    omit?: InterviewReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewReportInclude<ExtArgs> | null
  }


  /**
   * Model ResumeProfile
   */

  export type AggregateResumeProfile = {
    _count: ResumeProfileCountAggregateOutputType | null
    _min: ResumeProfileMinAggregateOutputType | null
    _max: ResumeProfileMaxAggregateOutputType | null
  }

  export type ResumeProfileMinAggregateOutputType = {
    id: string | null
    subaccountId: string | null
    source: string | null
    content: string | null
    createdAt: Date | null
  }

  export type ResumeProfileMaxAggregateOutputType = {
    id: string | null
    subaccountId: string | null
    source: string | null
    content: string | null
    createdAt: Date | null
  }

  export type ResumeProfileCountAggregateOutputType = {
    id: number
    subaccountId: number
    source: number
    content: number
    skills: number
    createdAt: number
    _all: number
  }


  export type ResumeProfileMinAggregateInputType = {
    id?: true
    subaccountId?: true
    source?: true
    content?: true
    createdAt?: true
  }

  export type ResumeProfileMaxAggregateInputType = {
    id?: true
    subaccountId?: true
    source?: true
    content?: true
    createdAt?: true
  }

  export type ResumeProfileCountAggregateInputType = {
    id?: true
    subaccountId?: true
    source?: true
    content?: true
    skills?: true
    createdAt?: true
    _all?: true
  }

  export type ResumeProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeProfile to aggregate.
     */
    where?: ResumeProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeProfiles to fetch.
     */
    orderBy?: ResumeProfileOrderByWithRelationInput | ResumeProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeProfiles
    **/
    _count?: true | ResumeProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeProfileMaxAggregateInputType
  }

  export type GetResumeProfileAggregateType<T extends ResumeProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeProfile[P]>
      : GetScalarType<T[P], AggregateResumeProfile[P]>
  }




  export type ResumeProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeProfileWhereInput
    orderBy?: ResumeProfileOrderByWithAggregationInput | ResumeProfileOrderByWithAggregationInput[]
    by: ResumeProfileScalarFieldEnum[] | ResumeProfileScalarFieldEnum
    having?: ResumeProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeProfileCountAggregateInputType | true
    _min?: ResumeProfileMinAggregateInputType
    _max?: ResumeProfileMaxAggregateInputType
  }

  export type ResumeProfileGroupByOutputType = {
    id: string
    subaccountId: string
    source: string
    content: string
    skills: string[]
    createdAt: Date
    _count: ResumeProfileCountAggregateOutputType | null
    _min: ResumeProfileMinAggregateOutputType | null
    _max: ResumeProfileMaxAggregateOutputType | null
  }

  type GetResumeProfileGroupByPayload<T extends ResumeProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeProfileGroupByOutputType[P]>
        }
      >
    >


  export type ResumeProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subaccountId?: boolean
    source?: boolean
    content?: boolean
    skills?: boolean
    createdAt?: boolean
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeProfile"]>

  export type ResumeProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subaccountId?: boolean
    source?: boolean
    content?: boolean
    skills?: boolean
    createdAt?: boolean
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeProfile"]>

  export type ResumeProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subaccountId?: boolean
    source?: boolean
    content?: boolean
    skills?: boolean
    createdAt?: boolean
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeProfile"]>

  export type ResumeProfileSelectScalar = {
    id?: boolean
    subaccountId?: boolean
    source?: boolean
    content?: boolean
    skills?: boolean
    createdAt?: boolean
  }

  export type ResumeProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subaccountId" | "source" | "content" | "skills" | "createdAt", ExtArgs["result"]["resumeProfile"]>
  export type ResumeProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }
  export type ResumeProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }
  export type ResumeProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subaccount?: boolean | SubaccountDefaultArgs<ExtArgs>
  }

  export type $ResumeProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeProfile"
    objects: {
      subaccount: Prisma.$SubaccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subaccountId: string
      source: string
      content: string
      skills: string[]
      createdAt: Date
    }, ExtArgs["result"]["resumeProfile"]>
    composites: {}
  }

  type ResumeProfileGetPayload<S extends boolean | null | undefined | ResumeProfileDefaultArgs> = $Result.GetResult<Prisma.$ResumeProfilePayload, S>

  type ResumeProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeProfileCountAggregateInputType | true
    }

  export interface ResumeProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeProfile'], meta: { name: 'ResumeProfile' } }
    /**
     * Find zero or one ResumeProfile that matches the filter.
     * @param {ResumeProfileFindUniqueArgs} args - Arguments to find a ResumeProfile
     * @example
     * // Get one ResumeProfile
     * const resumeProfile = await prisma.resumeProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeProfileFindUniqueArgs>(args: SelectSubset<T, ResumeProfileFindUniqueArgs<ExtArgs>>): Prisma__ResumeProfileClient<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeProfileFindUniqueOrThrowArgs} args - Arguments to find a ResumeProfile
     * @example
     * // Get one ResumeProfile
     * const resumeProfile = await prisma.resumeProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeProfileClient<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeProfileFindFirstArgs} args - Arguments to find a ResumeProfile
     * @example
     * // Get one ResumeProfile
     * const resumeProfile = await prisma.resumeProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeProfileFindFirstArgs>(args?: SelectSubset<T, ResumeProfileFindFirstArgs<ExtArgs>>): Prisma__ResumeProfileClient<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeProfileFindFirstOrThrowArgs} args - Arguments to find a ResumeProfile
     * @example
     * // Get one ResumeProfile
     * const resumeProfile = await prisma.resumeProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeProfileClient<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeProfiles
     * const resumeProfiles = await prisma.resumeProfile.findMany()
     * 
     * // Get first 10 ResumeProfiles
     * const resumeProfiles = await prisma.resumeProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeProfileWithIdOnly = await prisma.resumeProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeProfileFindManyArgs>(args?: SelectSubset<T, ResumeProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeProfile.
     * @param {ResumeProfileCreateArgs} args - Arguments to create a ResumeProfile.
     * @example
     * // Create one ResumeProfile
     * const ResumeProfile = await prisma.resumeProfile.create({
     *   data: {
     *     // ... data to create a ResumeProfile
     *   }
     * })
     * 
     */
    create<T extends ResumeProfileCreateArgs>(args: SelectSubset<T, ResumeProfileCreateArgs<ExtArgs>>): Prisma__ResumeProfileClient<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeProfiles.
     * @param {ResumeProfileCreateManyArgs} args - Arguments to create many ResumeProfiles.
     * @example
     * // Create many ResumeProfiles
     * const resumeProfile = await prisma.resumeProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeProfileCreateManyArgs>(args?: SelectSubset<T, ResumeProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeProfiles and returns the data saved in the database.
     * @param {ResumeProfileCreateManyAndReturnArgs} args - Arguments to create many ResumeProfiles.
     * @example
     * // Create many ResumeProfiles
     * const resumeProfile = await prisma.resumeProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeProfiles and only return the `id`
     * const resumeProfileWithIdOnly = await prisma.resumeProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeProfile.
     * @param {ResumeProfileDeleteArgs} args - Arguments to delete one ResumeProfile.
     * @example
     * // Delete one ResumeProfile
     * const ResumeProfile = await prisma.resumeProfile.delete({
     *   where: {
     *     // ... filter to delete one ResumeProfile
     *   }
     * })
     * 
     */
    delete<T extends ResumeProfileDeleteArgs>(args: SelectSubset<T, ResumeProfileDeleteArgs<ExtArgs>>): Prisma__ResumeProfileClient<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeProfile.
     * @param {ResumeProfileUpdateArgs} args - Arguments to update one ResumeProfile.
     * @example
     * // Update one ResumeProfile
     * const resumeProfile = await prisma.resumeProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeProfileUpdateArgs>(args: SelectSubset<T, ResumeProfileUpdateArgs<ExtArgs>>): Prisma__ResumeProfileClient<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeProfiles.
     * @param {ResumeProfileDeleteManyArgs} args - Arguments to filter ResumeProfiles to delete.
     * @example
     * // Delete a few ResumeProfiles
     * const { count } = await prisma.resumeProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeProfileDeleteManyArgs>(args?: SelectSubset<T, ResumeProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeProfiles
     * const resumeProfile = await prisma.resumeProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeProfileUpdateManyArgs>(args: SelectSubset<T, ResumeProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeProfiles and returns the data updated in the database.
     * @param {ResumeProfileUpdateManyAndReturnArgs} args - Arguments to update many ResumeProfiles.
     * @example
     * // Update many ResumeProfiles
     * const resumeProfile = await prisma.resumeProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeProfiles and only return the `id`
     * const resumeProfileWithIdOnly = await prisma.resumeProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeProfile.
     * @param {ResumeProfileUpsertArgs} args - Arguments to update or create a ResumeProfile.
     * @example
     * // Update or create a ResumeProfile
     * const resumeProfile = await prisma.resumeProfile.upsert({
     *   create: {
     *     // ... data to create a ResumeProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeProfile we want to update
     *   }
     * })
     */
    upsert<T extends ResumeProfileUpsertArgs>(args: SelectSubset<T, ResumeProfileUpsertArgs<ExtArgs>>): Prisma__ResumeProfileClient<$Result.GetResult<Prisma.$ResumeProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeProfileCountArgs} args - Arguments to filter ResumeProfiles to count.
     * @example
     * // Count the number of ResumeProfiles
     * const count = await prisma.resumeProfile.count({
     *   where: {
     *     // ... the filter for the ResumeProfiles we want to count
     *   }
     * })
    **/
    count<T extends ResumeProfileCountArgs>(
      args?: Subset<T, ResumeProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeProfileAggregateArgs>(args: Subset<T, ResumeProfileAggregateArgs>): Prisma.PrismaPromise<GetResumeProfileAggregateType<T>>

    /**
     * Group by ResumeProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeProfileGroupByArgs['orderBy'] }
        : { orderBy?: ResumeProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeProfile model
   */
  readonly fields: ResumeProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subaccount<T extends SubaccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubaccountDefaultArgs<ExtArgs>>): Prisma__SubaccountClient<$Result.GetResult<Prisma.$SubaccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeProfile model
   */
  interface ResumeProfileFieldRefs {
    readonly id: FieldRef<"ResumeProfile", 'String'>
    readonly subaccountId: FieldRef<"ResumeProfile", 'String'>
    readonly source: FieldRef<"ResumeProfile", 'String'>
    readonly content: FieldRef<"ResumeProfile", 'String'>
    readonly skills: FieldRef<"ResumeProfile", 'String[]'>
    readonly createdAt: FieldRef<"ResumeProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResumeProfile findUnique
   */
  export type ResumeProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
    /**
     * Filter, which ResumeProfile to fetch.
     */
    where: ResumeProfileWhereUniqueInput
  }

  /**
   * ResumeProfile findUniqueOrThrow
   */
  export type ResumeProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
    /**
     * Filter, which ResumeProfile to fetch.
     */
    where: ResumeProfileWhereUniqueInput
  }

  /**
   * ResumeProfile findFirst
   */
  export type ResumeProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
    /**
     * Filter, which ResumeProfile to fetch.
     */
    where?: ResumeProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeProfiles to fetch.
     */
    orderBy?: ResumeProfileOrderByWithRelationInput | ResumeProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeProfiles.
     */
    cursor?: ResumeProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeProfiles.
     */
    distinct?: ResumeProfileScalarFieldEnum | ResumeProfileScalarFieldEnum[]
  }

  /**
   * ResumeProfile findFirstOrThrow
   */
  export type ResumeProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
    /**
     * Filter, which ResumeProfile to fetch.
     */
    where?: ResumeProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeProfiles to fetch.
     */
    orderBy?: ResumeProfileOrderByWithRelationInput | ResumeProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeProfiles.
     */
    cursor?: ResumeProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeProfiles.
     */
    distinct?: ResumeProfileScalarFieldEnum | ResumeProfileScalarFieldEnum[]
  }

  /**
   * ResumeProfile findMany
   */
  export type ResumeProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
    /**
     * Filter, which ResumeProfiles to fetch.
     */
    where?: ResumeProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeProfiles to fetch.
     */
    orderBy?: ResumeProfileOrderByWithRelationInput | ResumeProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeProfiles.
     */
    cursor?: ResumeProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeProfiles.
     */
    skip?: number
    distinct?: ResumeProfileScalarFieldEnum | ResumeProfileScalarFieldEnum[]
  }

  /**
   * ResumeProfile create
   */
  export type ResumeProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeProfile.
     */
    data: XOR<ResumeProfileCreateInput, ResumeProfileUncheckedCreateInput>
  }

  /**
   * ResumeProfile createMany
   */
  export type ResumeProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeProfiles.
     */
    data: ResumeProfileCreateManyInput | ResumeProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeProfile createManyAndReturn
   */
  export type ResumeProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeProfiles.
     */
    data: ResumeProfileCreateManyInput | ResumeProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeProfile update
   */
  export type ResumeProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeProfile.
     */
    data: XOR<ResumeProfileUpdateInput, ResumeProfileUncheckedUpdateInput>
    /**
     * Choose, which ResumeProfile to update.
     */
    where: ResumeProfileWhereUniqueInput
  }

  /**
   * ResumeProfile updateMany
   */
  export type ResumeProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeProfiles.
     */
    data: XOR<ResumeProfileUpdateManyMutationInput, ResumeProfileUncheckedUpdateManyInput>
    /**
     * Filter which ResumeProfiles to update
     */
    where?: ResumeProfileWhereInput
    /**
     * Limit how many ResumeProfiles to update.
     */
    limit?: number
  }

  /**
   * ResumeProfile updateManyAndReturn
   */
  export type ResumeProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * The data used to update ResumeProfiles.
     */
    data: XOR<ResumeProfileUpdateManyMutationInput, ResumeProfileUncheckedUpdateManyInput>
    /**
     * Filter which ResumeProfiles to update
     */
    where?: ResumeProfileWhereInput
    /**
     * Limit how many ResumeProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeProfile upsert
   */
  export type ResumeProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeProfile to update in case it exists.
     */
    where: ResumeProfileWhereUniqueInput
    /**
     * In case the ResumeProfile found by the `where` argument doesn't exist, create a new ResumeProfile with this data.
     */
    create: XOR<ResumeProfileCreateInput, ResumeProfileUncheckedCreateInput>
    /**
     * In case the ResumeProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeProfileUpdateInput, ResumeProfileUncheckedUpdateInput>
  }

  /**
   * ResumeProfile delete
   */
  export type ResumeProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
    /**
     * Filter which ResumeProfile to delete.
     */
    where: ResumeProfileWhereUniqueInput
  }

  /**
   * ResumeProfile deleteMany
   */
  export type ResumeProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeProfiles to delete
     */
    where?: ResumeProfileWhereInput
    /**
     * Limit how many ResumeProfiles to delete.
     */
    limit?: number
  }

  /**
   * ResumeProfile without action
   */
  export type ResumeProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeProfile
     */
    select?: ResumeProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeProfile
     */
    omit?: ResumeProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeProfileInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SubaccountScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubaccountScalarFieldEnum = (typeof SubaccountScalarFieldEnum)[keyof typeof SubaccountScalarFieldEnum]


  export const InteractionScalarFieldEnum: {
    id: 'id',
    subaccountId: 'subaccountId',
    type: 'type',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type InteractionScalarFieldEnum = (typeof InteractionScalarFieldEnum)[keyof typeof InteractionScalarFieldEnum]


  export const InterviewReportScalarFieldEnum: {
    id: 'id',
    subaccountId: 'subaccountId',
    role: 'role',
    questions: 'questions',
    answers: 'answers',
    evaluation: 'evaluation',
    score: 'score',
    createdAt: 'createdAt'
  };

  export type InterviewReportScalarFieldEnum = (typeof InterviewReportScalarFieldEnum)[keyof typeof InterviewReportScalarFieldEnum]


  export const ResumeProfileScalarFieldEnum: {
    id: 'id',
    subaccountId: 'subaccountId',
    source: 'source',
    content: 'content',
    skills: 'skills',
    createdAt: 'createdAt'
  };

  export type ResumeProfileScalarFieldEnum = (typeof ResumeProfileScalarFieldEnum)[keyof typeof ResumeProfileScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    subaccounts?: SubaccountListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subaccounts?: SubaccountOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    subaccounts?: SubaccountListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SubaccountWhereInput = {
    AND?: SubaccountWhereInput | SubaccountWhereInput[]
    OR?: SubaccountWhereInput[]
    NOT?: SubaccountWhereInput | SubaccountWhereInput[]
    id?: StringFilter<"Subaccount"> | string
    name?: StringFilter<"Subaccount"> | string
    userId?: StringFilter<"Subaccount"> | string
    createdAt?: DateTimeFilter<"Subaccount"> | Date | string
    updatedAt?: DateTimeFilter<"Subaccount"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    interactions?: InteractionListRelationFilter
    interviews?: InterviewReportListRelationFilter
    resumes?: ResumeProfileListRelationFilter
  }

  export type SubaccountOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    interactions?: InteractionOrderByRelationAggregateInput
    interviews?: InterviewReportOrderByRelationAggregateInput
    resumes?: ResumeProfileOrderByRelationAggregateInput
  }

  export type SubaccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubaccountWhereInput | SubaccountWhereInput[]
    OR?: SubaccountWhereInput[]
    NOT?: SubaccountWhereInput | SubaccountWhereInput[]
    name?: StringFilter<"Subaccount"> | string
    userId?: StringFilter<"Subaccount"> | string
    createdAt?: DateTimeFilter<"Subaccount"> | Date | string
    updatedAt?: DateTimeFilter<"Subaccount"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    interactions?: InteractionListRelationFilter
    interviews?: InterviewReportListRelationFilter
    resumes?: ResumeProfileListRelationFilter
  }, "id">

  export type SubaccountOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubaccountCountOrderByAggregateInput
    _max?: SubaccountMaxOrderByAggregateInput
    _min?: SubaccountMinOrderByAggregateInput
  }

  export type SubaccountScalarWhereWithAggregatesInput = {
    AND?: SubaccountScalarWhereWithAggregatesInput | SubaccountScalarWhereWithAggregatesInput[]
    OR?: SubaccountScalarWhereWithAggregatesInput[]
    NOT?: SubaccountScalarWhereWithAggregatesInput | SubaccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subaccount"> | string
    name?: StringWithAggregatesFilter<"Subaccount"> | string
    userId?: StringWithAggregatesFilter<"Subaccount"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Subaccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subaccount"> | Date | string
  }

  export type InteractionWhereInput = {
    AND?: InteractionWhereInput | InteractionWhereInput[]
    OR?: InteractionWhereInput[]
    NOT?: InteractionWhereInput | InteractionWhereInput[]
    id?: StringFilter<"Interaction"> | string
    subaccountId?: StringFilter<"Interaction"> | string
    type?: StringFilter<"Interaction"> | string
    content?: StringFilter<"Interaction"> | string
    createdAt?: DateTimeFilter<"Interaction"> | Date | string
    subaccount?: XOR<SubaccountScalarRelationFilter, SubaccountWhereInput>
  }

  export type InteractionOrderByWithRelationInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    subaccount?: SubaccountOrderByWithRelationInput
  }

  export type InteractionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InteractionWhereInput | InteractionWhereInput[]
    OR?: InteractionWhereInput[]
    NOT?: InteractionWhereInput | InteractionWhereInput[]
    subaccountId?: StringFilter<"Interaction"> | string
    type?: StringFilter<"Interaction"> | string
    content?: StringFilter<"Interaction"> | string
    createdAt?: DateTimeFilter<"Interaction"> | Date | string
    subaccount?: XOR<SubaccountScalarRelationFilter, SubaccountWhereInput>
  }, "id">

  export type InteractionOrderByWithAggregationInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: InteractionCountOrderByAggregateInput
    _max?: InteractionMaxOrderByAggregateInput
    _min?: InteractionMinOrderByAggregateInput
  }

  export type InteractionScalarWhereWithAggregatesInput = {
    AND?: InteractionScalarWhereWithAggregatesInput | InteractionScalarWhereWithAggregatesInput[]
    OR?: InteractionScalarWhereWithAggregatesInput[]
    NOT?: InteractionScalarWhereWithAggregatesInput | InteractionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Interaction"> | string
    subaccountId?: StringWithAggregatesFilter<"Interaction"> | string
    type?: StringWithAggregatesFilter<"Interaction"> | string
    content?: StringWithAggregatesFilter<"Interaction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Interaction"> | Date | string
  }

  export type InterviewReportWhereInput = {
    AND?: InterviewReportWhereInput | InterviewReportWhereInput[]
    OR?: InterviewReportWhereInput[]
    NOT?: InterviewReportWhereInput | InterviewReportWhereInput[]
    id?: StringFilter<"InterviewReport"> | string
    subaccountId?: StringFilter<"InterviewReport"> | string
    role?: StringFilter<"InterviewReport"> | string
    questions?: StringFilter<"InterviewReport"> | string
    answers?: StringFilter<"InterviewReport"> | string
    evaluation?: StringFilter<"InterviewReport"> | string
    score?: FloatFilter<"InterviewReport"> | number
    createdAt?: DateTimeFilter<"InterviewReport"> | Date | string
    subaccount?: XOR<SubaccountScalarRelationFilter, SubaccountWhereInput>
  }

  export type InterviewReportOrderByWithRelationInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    role?: SortOrder
    questions?: SortOrder
    answers?: SortOrder
    evaluation?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    subaccount?: SubaccountOrderByWithRelationInput
  }

  export type InterviewReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InterviewReportWhereInput | InterviewReportWhereInput[]
    OR?: InterviewReportWhereInput[]
    NOT?: InterviewReportWhereInput | InterviewReportWhereInput[]
    subaccountId?: StringFilter<"InterviewReport"> | string
    role?: StringFilter<"InterviewReport"> | string
    questions?: StringFilter<"InterviewReport"> | string
    answers?: StringFilter<"InterviewReport"> | string
    evaluation?: StringFilter<"InterviewReport"> | string
    score?: FloatFilter<"InterviewReport"> | number
    createdAt?: DateTimeFilter<"InterviewReport"> | Date | string
    subaccount?: XOR<SubaccountScalarRelationFilter, SubaccountWhereInput>
  }, "id">

  export type InterviewReportOrderByWithAggregationInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    role?: SortOrder
    questions?: SortOrder
    answers?: SortOrder
    evaluation?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    _count?: InterviewReportCountOrderByAggregateInput
    _avg?: InterviewReportAvgOrderByAggregateInput
    _max?: InterviewReportMaxOrderByAggregateInput
    _min?: InterviewReportMinOrderByAggregateInput
    _sum?: InterviewReportSumOrderByAggregateInput
  }

  export type InterviewReportScalarWhereWithAggregatesInput = {
    AND?: InterviewReportScalarWhereWithAggregatesInput | InterviewReportScalarWhereWithAggregatesInput[]
    OR?: InterviewReportScalarWhereWithAggregatesInput[]
    NOT?: InterviewReportScalarWhereWithAggregatesInput | InterviewReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InterviewReport"> | string
    subaccountId?: StringWithAggregatesFilter<"InterviewReport"> | string
    role?: StringWithAggregatesFilter<"InterviewReport"> | string
    questions?: StringWithAggregatesFilter<"InterviewReport"> | string
    answers?: StringWithAggregatesFilter<"InterviewReport"> | string
    evaluation?: StringWithAggregatesFilter<"InterviewReport"> | string
    score?: FloatWithAggregatesFilter<"InterviewReport"> | number
    createdAt?: DateTimeWithAggregatesFilter<"InterviewReport"> | Date | string
  }

  export type ResumeProfileWhereInput = {
    AND?: ResumeProfileWhereInput | ResumeProfileWhereInput[]
    OR?: ResumeProfileWhereInput[]
    NOT?: ResumeProfileWhereInput | ResumeProfileWhereInput[]
    id?: StringFilter<"ResumeProfile"> | string
    subaccountId?: StringFilter<"ResumeProfile"> | string
    source?: StringFilter<"ResumeProfile"> | string
    content?: StringFilter<"ResumeProfile"> | string
    skills?: StringNullableListFilter<"ResumeProfile">
    createdAt?: DateTimeFilter<"ResumeProfile"> | Date | string
    subaccount?: XOR<SubaccountScalarRelationFilter, SubaccountWhereInput>
  }

  export type ResumeProfileOrderByWithRelationInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    source?: SortOrder
    content?: SortOrder
    skills?: SortOrder
    createdAt?: SortOrder
    subaccount?: SubaccountOrderByWithRelationInput
  }

  export type ResumeProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResumeProfileWhereInput | ResumeProfileWhereInput[]
    OR?: ResumeProfileWhereInput[]
    NOT?: ResumeProfileWhereInput | ResumeProfileWhereInput[]
    subaccountId?: StringFilter<"ResumeProfile"> | string
    source?: StringFilter<"ResumeProfile"> | string
    content?: StringFilter<"ResumeProfile"> | string
    skills?: StringNullableListFilter<"ResumeProfile">
    createdAt?: DateTimeFilter<"ResumeProfile"> | Date | string
    subaccount?: XOR<SubaccountScalarRelationFilter, SubaccountWhereInput>
  }, "id">

  export type ResumeProfileOrderByWithAggregationInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    source?: SortOrder
    content?: SortOrder
    skills?: SortOrder
    createdAt?: SortOrder
    _count?: ResumeProfileCountOrderByAggregateInput
    _max?: ResumeProfileMaxOrderByAggregateInput
    _min?: ResumeProfileMinOrderByAggregateInput
  }

  export type ResumeProfileScalarWhereWithAggregatesInput = {
    AND?: ResumeProfileScalarWhereWithAggregatesInput | ResumeProfileScalarWhereWithAggregatesInput[]
    OR?: ResumeProfileScalarWhereWithAggregatesInput[]
    NOT?: ResumeProfileScalarWhereWithAggregatesInput | ResumeProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ResumeProfile"> | string
    subaccountId?: StringWithAggregatesFilter<"ResumeProfile"> | string
    source?: StringWithAggregatesFilter<"ResumeProfile"> | string
    content?: StringWithAggregatesFilter<"ResumeProfile"> | string
    skills?: StringNullableListFilter<"ResumeProfile">
    createdAt?: DateTimeWithAggregatesFilter<"ResumeProfile"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subaccounts?: SubaccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subaccounts?: SubaccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subaccounts?: SubaccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subaccounts?: SubaccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubaccountCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubaccountsInput
    interactions?: InteractionCreateNestedManyWithoutSubaccountInput
    interviews?: InterviewReportCreateNestedManyWithoutSubaccountInput
    resumes?: ResumeProfileCreateNestedManyWithoutSubaccountInput
  }

  export type SubaccountUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    interactions?: InteractionUncheckedCreateNestedManyWithoutSubaccountInput
    interviews?: InterviewReportUncheckedCreateNestedManyWithoutSubaccountInput
    resumes?: ResumeProfileUncheckedCreateNestedManyWithoutSubaccountInput
  }

  export type SubaccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubaccountsNestedInput
    interactions?: InteractionUpdateManyWithoutSubaccountNestedInput
    interviews?: InterviewReportUpdateManyWithoutSubaccountNestedInput
    resumes?: ResumeProfileUpdateManyWithoutSubaccountNestedInput
  }

  export type SubaccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interactions?: InteractionUncheckedUpdateManyWithoutSubaccountNestedInput
    interviews?: InterviewReportUncheckedUpdateManyWithoutSubaccountNestedInput
    resumes?: ResumeProfileUncheckedUpdateManyWithoutSubaccountNestedInput
  }

  export type SubaccountCreateManyInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubaccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubaccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionCreateInput = {
    id?: string
    type: string
    content: string
    createdAt?: Date | string
    subaccount: SubaccountCreateNestedOneWithoutInteractionsInput
  }

  export type InteractionUncheckedCreateInput = {
    id?: string
    subaccountId: string
    type: string
    content: string
    createdAt?: Date | string
  }

  export type InteractionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subaccount?: SubaccountUpdateOneRequiredWithoutInteractionsNestedInput
  }

  export type InteractionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subaccountId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionCreateManyInput = {
    id?: string
    subaccountId: string
    type: string
    content: string
    createdAt?: Date | string
  }

  export type InteractionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subaccountId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewReportCreateInput = {
    id?: string
    role: string
    questions: string
    answers: string
    evaluation: string
    score: number
    createdAt?: Date | string
    subaccount: SubaccountCreateNestedOneWithoutInterviewsInput
  }

  export type InterviewReportUncheckedCreateInput = {
    id?: string
    subaccountId: string
    role: string
    questions: string
    answers: string
    evaluation: string
    score: number
    createdAt?: Date | string
  }

  export type InterviewReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    answers?: StringFieldUpdateOperationsInput | string
    evaluation?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subaccount?: SubaccountUpdateOneRequiredWithoutInterviewsNestedInput
  }

  export type InterviewReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subaccountId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    answers?: StringFieldUpdateOperationsInput | string
    evaluation?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewReportCreateManyInput = {
    id?: string
    subaccountId: string
    role: string
    questions: string
    answers: string
    evaluation: string
    score: number
    createdAt?: Date | string
  }

  export type InterviewReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    answers?: StringFieldUpdateOperationsInput | string
    evaluation?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subaccountId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    answers?: StringFieldUpdateOperationsInput | string
    evaluation?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeProfileCreateInput = {
    id?: string
    source: string
    content: string
    skills?: ResumeProfileCreateskillsInput | string[]
    createdAt?: Date | string
    subaccount: SubaccountCreateNestedOneWithoutResumesInput
  }

  export type ResumeProfileUncheckedCreateInput = {
    id?: string
    subaccountId: string
    source: string
    content: string
    skills?: ResumeProfileCreateskillsInput | string[]
    createdAt?: Date | string
  }

  export type ResumeProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    skills?: ResumeProfileUpdateskillsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subaccount?: SubaccountUpdateOneRequiredWithoutResumesNestedInput
  }

  export type ResumeProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subaccountId?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    skills?: ResumeProfileUpdateskillsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeProfileCreateManyInput = {
    id?: string
    subaccountId: string
    source: string
    content: string
    skills?: ResumeProfileCreateskillsInput | string[]
    createdAt?: Date | string
  }

  export type ResumeProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    skills?: ResumeProfileUpdateskillsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subaccountId?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    skills?: ResumeProfileUpdateskillsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SubaccountListRelationFilter = {
    every?: SubaccountWhereInput
    some?: SubaccountWhereInput
    none?: SubaccountWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SubaccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type InteractionListRelationFilter = {
    every?: InteractionWhereInput
    some?: InteractionWhereInput
    none?: InteractionWhereInput
  }

  export type InterviewReportListRelationFilter = {
    every?: InterviewReportWhereInput
    some?: InterviewReportWhereInput
    none?: InterviewReportWhereInput
  }

  export type ResumeProfileListRelationFilter = {
    every?: ResumeProfileWhereInput
    some?: ResumeProfileWhereInput
    none?: ResumeProfileWhereInput
  }

  export type InteractionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InterviewReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubaccountCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubaccountMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubaccountMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubaccountScalarRelationFilter = {
    is?: SubaccountWhereInput
    isNot?: SubaccountWhereInput
  }

  export type InteractionCountOrderByAggregateInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type InteractionMaxOrderByAggregateInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type InteractionMinOrderByAggregateInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type InterviewReportCountOrderByAggregateInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    role?: SortOrder
    questions?: SortOrder
    answers?: SortOrder
    evaluation?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type InterviewReportAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type InterviewReportMaxOrderByAggregateInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    role?: SortOrder
    questions?: SortOrder
    answers?: SortOrder
    evaluation?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type InterviewReportMinOrderByAggregateInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    role?: SortOrder
    questions?: SortOrder
    answers?: SortOrder
    evaluation?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type InterviewReportSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ResumeProfileCountOrderByAggregateInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    source?: SortOrder
    content?: SortOrder
    skills?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    source?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeProfileMinOrderByAggregateInput = {
    id?: SortOrder
    subaccountId?: SortOrder
    source?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type SubaccountCreateNestedManyWithoutUserInput = {
    create?: XOR<SubaccountCreateWithoutUserInput, SubaccountUncheckedCreateWithoutUserInput> | SubaccountCreateWithoutUserInput[] | SubaccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubaccountCreateOrConnectWithoutUserInput | SubaccountCreateOrConnectWithoutUserInput[]
    createMany?: SubaccountCreateManyUserInputEnvelope
    connect?: SubaccountWhereUniqueInput | SubaccountWhereUniqueInput[]
  }

  export type SubaccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubaccountCreateWithoutUserInput, SubaccountUncheckedCreateWithoutUserInput> | SubaccountCreateWithoutUserInput[] | SubaccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubaccountCreateOrConnectWithoutUserInput | SubaccountCreateOrConnectWithoutUserInput[]
    createMany?: SubaccountCreateManyUserInputEnvelope
    connect?: SubaccountWhereUniqueInput | SubaccountWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SubaccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubaccountCreateWithoutUserInput, SubaccountUncheckedCreateWithoutUserInput> | SubaccountCreateWithoutUserInput[] | SubaccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubaccountCreateOrConnectWithoutUserInput | SubaccountCreateOrConnectWithoutUserInput[]
    upsert?: SubaccountUpsertWithWhereUniqueWithoutUserInput | SubaccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubaccountCreateManyUserInputEnvelope
    set?: SubaccountWhereUniqueInput | SubaccountWhereUniqueInput[]
    disconnect?: SubaccountWhereUniqueInput | SubaccountWhereUniqueInput[]
    delete?: SubaccountWhereUniqueInput | SubaccountWhereUniqueInput[]
    connect?: SubaccountWhereUniqueInput | SubaccountWhereUniqueInput[]
    update?: SubaccountUpdateWithWhereUniqueWithoutUserInput | SubaccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubaccountUpdateManyWithWhereWithoutUserInput | SubaccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubaccountScalarWhereInput | SubaccountScalarWhereInput[]
  }

  export type SubaccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubaccountCreateWithoutUserInput, SubaccountUncheckedCreateWithoutUserInput> | SubaccountCreateWithoutUserInput[] | SubaccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubaccountCreateOrConnectWithoutUserInput | SubaccountCreateOrConnectWithoutUserInput[]
    upsert?: SubaccountUpsertWithWhereUniqueWithoutUserInput | SubaccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubaccountCreateManyUserInputEnvelope
    set?: SubaccountWhereUniqueInput | SubaccountWhereUniqueInput[]
    disconnect?: SubaccountWhereUniqueInput | SubaccountWhereUniqueInput[]
    delete?: SubaccountWhereUniqueInput | SubaccountWhereUniqueInput[]
    connect?: SubaccountWhereUniqueInput | SubaccountWhereUniqueInput[]
    update?: SubaccountUpdateWithWhereUniqueWithoutUserInput | SubaccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubaccountUpdateManyWithWhereWithoutUserInput | SubaccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubaccountScalarWhereInput | SubaccountScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubaccountsInput = {
    create?: XOR<UserCreateWithoutSubaccountsInput, UserUncheckedCreateWithoutSubaccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubaccountsInput
    connect?: UserWhereUniqueInput
  }

  export type InteractionCreateNestedManyWithoutSubaccountInput = {
    create?: XOR<InteractionCreateWithoutSubaccountInput, InteractionUncheckedCreateWithoutSubaccountInput> | InteractionCreateWithoutSubaccountInput[] | InteractionUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutSubaccountInput | InteractionCreateOrConnectWithoutSubaccountInput[]
    createMany?: InteractionCreateManySubaccountInputEnvelope
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
  }

  export type InterviewReportCreateNestedManyWithoutSubaccountInput = {
    create?: XOR<InterviewReportCreateWithoutSubaccountInput, InterviewReportUncheckedCreateWithoutSubaccountInput> | InterviewReportCreateWithoutSubaccountInput[] | InterviewReportUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: InterviewReportCreateOrConnectWithoutSubaccountInput | InterviewReportCreateOrConnectWithoutSubaccountInput[]
    createMany?: InterviewReportCreateManySubaccountInputEnvelope
    connect?: InterviewReportWhereUniqueInput | InterviewReportWhereUniqueInput[]
  }

  export type ResumeProfileCreateNestedManyWithoutSubaccountInput = {
    create?: XOR<ResumeProfileCreateWithoutSubaccountInput, ResumeProfileUncheckedCreateWithoutSubaccountInput> | ResumeProfileCreateWithoutSubaccountInput[] | ResumeProfileUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: ResumeProfileCreateOrConnectWithoutSubaccountInput | ResumeProfileCreateOrConnectWithoutSubaccountInput[]
    createMany?: ResumeProfileCreateManySubaccountInputEnvelope
    connect?: ResumeProfileWhereUniqueInput | ResumeProfileWhereUniqueInput[]
  }

  export type InteractionUncheckedCreateNestedManyWithoutSubaccountInput = {
    create?: XOR<InteractionCreateWithoutSubaccountInput, InteractionUncheckedCreateWithoutSubaccountInput> | InteractionCreateWithoutSubaccountInput[] | InteractionUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutSubaccountInput | InteractionCreateOrConnectWithoutSubaccountInput[]
    createMany?: InteractionCreateManySubaccountInputEnvelope
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
  }

  export type InterviewReportUncheckedCreateNestedManyWithoutSubaccountInput = {
    create?: XOR<InterviewReportCreateWithoutSubaccountInput, InterviewReportUncheckedCreateWithoutSubaccountInput> | InterviewReportCreateWithoutSubaccountInput[] | InterviewReportUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: InterviewReportCreateOrConnectWithoutSubaccountInput | InterviewReportCreateOrConnectWithoutSubaccountInput[]
    createMany?: InterviewReportCreateManySubaccountInputEnvelope
    connect?: InterviewReportWhereUniqueInput | InterviewReportWhereUniqueInput[]
  }

  export type ResumeProfileUncheckedCreateNestedManyWithoutSubaccountInput = {
    create?: XOR<ResumeProfileCreateWithoutSubaccountInput, ResumeProfileUncheckedCreateWithoutSubaccountInput> | ResumeProfileCreateWithoutSubaccountInput[] | ResumeProfileUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: ResumeProfileCreateOrConnectWithoutSubaccountInput | ResumeProfileCreateOrConnectWithoutSubaccountInput[]
    createMany?: ResumeProfileCreateManySubaccountInputEnvelope
    connect?: ResumeProfileWhereUniqueInput | ResumeProfileWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSubaccountsNestedInput = {
    create?: XOR<UserCreateWithoutSubaccountsInput, UserUncheckedCreateWithoutSubaccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubaccountsInput
    upsert?: UserUpsertWithoutSubaccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubaccountsInput, UserUpdateWithoutSubaccountsInput>, UserUncheckedUpdateWithoutSubaccountsInput>
  }

  export type InteractionUpdateManyWithoutSubaccountNestedInput = {
    create?: XOR<InteractionCreateWithoutSubaccountInput, InteractionUncheckedCreateWithoutSubaccountInput> | InteractionCreateWithoutSubaccountInput[] | InteractionUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutSubaccountInput | InteractionCreateOrConnectWithoutSubaccountInput[]
    upsert?: InteractionUpsertWithWhereUniqueWithoutSubaccountInput | InteractionUpsertWithWhereUniqueWithoutSubaccountInput[]
    createMany?: InteractionCreateManySubaccountInputEnvelope
    set?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    disconnect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    delete?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    update?: InteractionUpdateWithWhereUniqueWithoutSubaccountInput | InteractionUpdateWithWhereUniqueWithoutSubaccountInput[]
    updateMany?: InteractionUpdateManyWithWhereWithoutSubaccountInput | InteractionUpdateManyWithWhereWithoutSubaccountInput[]
    deleteMany?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
  }

  export type InterviewReportUpdateManyWithoutSubaccountNestedInput = {
    create?: XOR<InterviewReportCreateWithoutSubaccountInput, InterviewReportUncheckedCreateWithoutSubaccountInput> | InterviewReportCreateWithoutSubaccountInput[] | InterviewReportUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: InterviewReportCreateOrConnectWithoutSubaccountInput | InterviewReportCreateOrConnectWithoutSubaccountInput[]
    upsert?: InterviewReportUpsertWithWhereUniqueWithoutSubaccountInput | InterviewReportUpsertWithWhereUniqueWithoutSubaccountInput[]
    createMany?: InterviewReportCreateManySubaccountInputEnvelope
    set?: InterviewReportWhereUniqueInput | InterviewReportWhereUniqueInput[]
    disconnect?: InterviewReportWhereUniqueInput | InterviewReportWhereUniqueInput[]
    delete?: InterviewReportWhereUniqueInput | InterviewReportWhereUniqueInput[]
    connect?: InterviewReportWhereUniqueInput | InterviewReportWhereUniqueInput[]
    update?: InterviewReportUpdateWithWhereUniqueWithoutSubaccountInput | InterviewReportUpdateWithWhereUniqueWithoutSubaccountInput[]
    updateMany?: InterviewReportUpdateManyWithWhereWithoutSubaccountInput | InterviewReportUpdateManyWithWhereWithoutSubaccountInput[]
    deleteMany?: InterviewReportScalarWhereInput | InterviewReportScalarWhereInput[]
  }

  export type ResumeProfileUpdateManyWithoutSubaccountNestedInput = {
    create?: XOR<ResumeProfileCreateWithoutSubaccountInput, ResumeProfileUncheckedCreateWithoutSubaccountInput> | ResumeProfileCreateWithoutSubaccountInput[] | ResumeProfileUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: ResumeProfileCreateOrConnectWithoutSubaccountInput | ResumeProfileCreateOrConnectWithoutSubaccountInput[]
    upsert?: ResumeProfileUpsertWithWhereUniqueWithoutSubaccountInput | ResumeProfileUpsertWithWhereUniqueWithoutSubaccountInput[]
    createMany?: ResumeProfileCreateManySubaccountInputEnvelope
    set?: ResumeProfileWhereUniqueInput | ResumeProfileWhereUniqueInput[]
    disconnect?: ResumeProfileWhereUniqueInput | ResumeProfileWhereUniqueInput[]
    delete?: ResumeProfileWhereUniqueInput | ResumeProfileWhereUniqueInput[]
    connect?: ResumeProfileWhereUniqueInput | ResumeProfileWhereUniqueInput[]
    update?: ResumeProfileUpdateWithWhereUniqueWithoutSubaccountInput | ResumeProfileUpdateWithWhereUniqueWithoutSubaccountInput[]
    updateMany?: ResumeProfileUpdateManyWithWhereWithoutSubaccountInput | ResumeProfileUpdateManyWithWhereWithoutSubaccountInput[]
    deleteMany?: ResumeProfileScalarWhereInput | ResumeProfileScalarWhereInput[]
  }

  export type InteractionUncheckedUpdateManyWithoutSubaccountNestedInput = {
    create?: XOR<InteractionCreateWithoutSubaccountInput, InteractionUncheckedCreateWithoutSubaccountInput> | InteractionCreateWithoutSubaccountInput[] | InteractionUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: InteractionCreateOrConnectWithoutSubaccountInput | InteractionCreateOrConnectWithoutSubaccountInput[]
    upsert?: InteractionUpsertWithWhereUniqueWithoutSubaccountInput | InteractionUpsertWithWhereUniqueWithoutSubaccountInput[]
    createMany?: InteractionCreateManySubaccountInputEnvelope
    set?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    disconnect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    delete?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    connect?: InteractionWhereUniqueInput | InteractionWhereUniqueInput[]
    update?: InteractionUpdateWithWhereUniqueWithoutSubaccountInput | InteractionUpdateWithWhereUniqueWithoutSubaccountInput[]
    updateMany?: InteractionUpdateManyWithWhereWithoutSubaccountInput | InteractionUpdateManyWithWhereWithoutSubaccountInput[]
    deleteMany?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
  }

  export type InterviewReportUncheckedUpdateManyWithoutSubaccountNestedInput = {
    create?: XOR<InterviewReportCreateWithoutSubaccountInput, InterviewReportUncheckedCreateWithoutSubaccountInput> | InterviewReportCreateWithoutSubaccountInput[] | InterviewReportUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: InterviewReportCreateOrConnectWithoutSubaccountInput | InterviewReportCreateOrConnectWithoutSubaccountInput[]
    upsert?: InterviewReportUpsertWithWhereUniqueWithoutSubaccountInput | InterviewReportUpsertWithWhereUniqueWithoutSubaccountInput[]
    createMany?: InterviewReportCreateManySubaccountInputEnvelope
    set?: InterviewReportWhereUniqueInput | InterviewReportWhereUniqueInput[]
    disconnect?: InterviewReportWhereUniqueInput | InterviewReportWhereUniqueInput[]
    delete?: InterviewReportWhereUniqueInput | InterviewReportWhereUniqueInput[]
    connect?: InterviewReportWhereUniqueInput | InterviewReportWhereUniqueInput[]
    update?: InterviewReportUpdateWithWhereUniqueWithoutSubaccountInput | InterviewReportUpdateWithWhereUniqueWithoutSubaccountInput[]
    updateMany?: InterviewReportUpdateManyWithWhereWithoutSubaccountInput | InterviewReportUpdateManyWithWhereWithoutSubaccountInput[]
    deleteMany?: InterviewReportScalarWhereInput | InterviewReportScalarWhereInput[]
  }

  export type ResumeProfileUncheckedUpdateManyWithoutSubaccountNestedInput = {
    create?: XOR<ResumeProfileCreateWithoutSubaccountInput, ResumeProfileUncheckedCreateWithoutSubaccountInput> | ResumeProfileCreateWithoutSubaccountInput[] | ResumeProfileUncheckedCreateWithoutSubaccountInput[]
    connectOrCreate?: ResumeProfileCreateOrConnectWithoutSubaccountInput | ResumeProfileCreateOrConnectWithoutSubaccountInput[]
    upsert?: ResumeProfileUpsertWithWhereUniqueWithoutSubaccountInput | ResumeProfileUpsertWithWhereUniqueWithoutSubaccountInput[]
    createMany?: ResumeProfileCreateManySubaccountInputEnvelope
    set?: ResumeProfileWhereUniqueInput | ResumeProfileWhereUniqueInput[]
    disconnect?: ResumeProfileWhereUniqueInput | ResumeProfileWhereUniqueInput[]
    delete?: ResumeProfileWhereUniqueInput | ResumeProfileWhereUniqueInput[]
    connect?: ResumeProfileWhereUniqueInput | ResumeProfileWhereUniqueInput[]
    update?: ResumeProfileUpdateWithWhereUniqueWithoutSubaccountInput | ResumeProfileUpdateWithWhereUniqueWithoutSubaccountInput[]
    updateMany?: ResumeProfileUpdateManyWithWhereWithoutSubaccountInput | ResumeProfileUpdateManyWithWhereWithoutSubaccountInput[]
    deleteMany?: ResumeProfileScalarWhereInput | ResumeProfileScalarWhereInput[]
  }

  export type SubaccountCreateNestedOneWithoutInteractionsInput = {
    create?: XOR<SubaccountCreateWithoutInteractionsInput, SubaccountUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: SubaccountCreateOrConnectWithoutInteractionsInput
    connect?: SubaccountWhereUniqueInput
  }

  export type SubaccountUpdateOneRequiredWithoutInteractionsNestedInput = {
    create?: XOR<SubaccountCreateWithoutInteractionsInput, SubaccountUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: SubaccountCreateOrConnectWithoutInteractionsInput
    upsert?: SubaccountUpsertWithoutInteractionsInput
    connect?: SubaccountWhereUniqueInput
    update?: XOR<XOR<SubaccountUpdateToOneWithWhereWithoutInteractionsInput, SubaccountUpdateWithoutInteractionsInput>, SubaccountUncheckedUpdateWithoutInteractionsInput>
  }

  export type SubaccountCreateNestedOneWithoutInterviewsInput = {
    create?: XOR<SubaccountCreateWithoutInterviewsInput, SubaccountUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: SubaccountCreateOrConnectWithoutInterviewsInput
    connect?: SubaccountWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubaccountUpdateOneRequiredWithoutInterviewsNestedInput = {
    create?: XOR<SubaccountCreateWithoutInterviewsInput, SubaccountUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: SubaccountCreateOrConnectWithoutInterviewsInput
    upsert?: SubaccountUpsertWithoutInterviewsInput
    connect?: SubaccountWhereUniqueInput
    update?: XOR<XOR<SubaccountUpdateToOneWithWhereWithoutInterviewsInput, SubaccountUpdateWithoutInterviewsInput>, SubaccountUncheckedUpdateWithoutInterviewsInput>
  }

  export type ResumeProfileCreateskillsInput = {
    set: string[]
  }

  export type SubaccountCreateNestedOneWithoutResumesInput = {
    create?: XOR<SubaccountCreateWithoutResumesInput, SubaccountUncheckedCreateWithoutResumesInput>
    connectOrCreate?: SubaccountCreateOrConnectWithoutResumesInput
    connect?: SubaccountWhereUniqueInput
  }

  export type ResumeProfileUpdateskillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SubaccountUpdateOneRequiredWithoutResumesNestedInput = {
    create?: XOR<SubaccountCreateWithoutResumesInput, SubaccountUncheckedCreateWithoutResumesInput>
    connectOrCreate?: SubaccountCreateOrConnectWithoutResumesInput
    upsert?: SubaccountUpsertWithoutResumesInput
    connect?: SubaccountWhereUniqueInput
    update?: XOR<XOR<SubaccountUpdateToOneWithWhereWithoutResumesInput, SubaccountUpdateWithoutResumesInput>, SubaccountUncheckedUpdateWithoutResumesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SubaccountCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    interactions?: InteractionCreateNestedManyWithoutSubaccountInput
    interviews?: InterviewReportCreateNestedManyWithoutSubaccountInput
    resumes?: ResumeProfileCreateNestedManyWithoutSubaccountInput
  }

  export type SubaccountUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    interactions?: InteractionUncheckedCreateNestedManyWithoutSubaccountInput
    interviews?: InterviewReportUncheckedCreateNestedManyWithoutSubaccountInput
    resumes?: ResumeProfileUncheckedCreateNestedManyWithoutSubaccountInput
  }

  export type SubaccountCreateOrConnectWithoutUserInput = {
    where: SubaccountWhereUniqueInput
    create: XOR<SubaccountCreateWithoutUserInput, SubaccountUncheckedCreateWithoutUserInput>
  }

  export type SubaccountCreateManyUserInputEnvelope = {
    data: SubaccountCreateManyUserInput | SubaccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubaccountUpsertWithWhereUniqueWithoutUserInput = {
    where: SubaccountWhereUniqueInput
    update: XOR<SubaccountUpdateWithoutUserInput, SubaccountUncheckedUpdateWithoutUserInput>
    create: XOR<SubaccountCreateWithoutUserInput, SubaccountUncheckedCreateWithoutUserInput>
  }

  export type SubaccountUpdateWithWhereUniqueWithoutUserInput = {
    where: SubaccountWhereUniqueInput
    data: XOR<SubaccountUpdateWithoutUserInput, SubaccountUncheckedUpdateWithoutUserInput>
  }

  export type SubaccountUpdateManyWithWhereWithoutUserInput = {
    where: SubaccountScalarWhereInput
    data: XOR<SubaccountUpdateManyMutationInput, SubaccountUncheckedUpdateManyWithoutUserInput>
  }

  export type SubaccountScalarWhereInput = {
    AND?: SubaccountScalarWhereInput | SubaccountScalarWhereInput[]
    OR?: SubaccountScalarWhereInput[]
    NOT?: SubaccountScalarWhereInput | SubaccountScalarWhereInput[]
    id?: StringFilter<"Subaccount"> | string
    name?: StringFilter<"Subaccount"> | string
    userId?: StringFilter<"Subaccount"> | string
    createdAt?: DateTimeFilter<"Subaccount"> | Date | string
    updatedAt?: DateTimeFilter<"Subaccount"> | Date | string
  }

  export type UserCreateWithoutSubaccountsInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutSubaccountsInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutSubaccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubaccountsInput, UserUncheckedCreateWithoutSubaccountsInput>
  }

  export type InteractionCreateWithoutSubaccountInput = {
    id?: string
    type: string
    content: string
    createdAt?: Date | string
  }

  export type InteractionUncheckedCreateWithoutSubaccountInput = {
    id?: string
    type: string
    content: string
    createdAt?: Date | string
  }

  export type InteractionCreateOrConnectWithoutSubaccountInput = {
    where: InteractionWhereUniqueInput
    create: XOR<InteractionCreateWithoutSubaccountInput, InteractionUncheckedCreateWithoutSubaccountInput>
  }

  export type InteractionCreateManySubaccountInputEnvelope = {
    data: InteractionCreateManySubaccountInput | InteractionCreateManySubaccountInput[]
    skipDuplicates?: boolean
  }

  export type InterviewReportCreateWithoutSubaccountInput = {
    id?: string
    role: string
    questions: string
    answers: string
    evaluation: string
    score: number
    createdAt?: Date | string
  }

  export type InterviewReportUncheckedCreateWithoutSubaccountInput = {
    id?: string
    role: string
    questions: string
    answers: string
    evaluation: string
    score: number
    createdAt?: Date | string
  }

  export type InterviewReportCreateOrConnectWithoutSubaccountInput = {
    where: InterviewReportWhereUniqueInput
    create: XOR<InterviewReportCreateWithoutSubaccountInput, InterviewReportUncheckedCreateWithoutSubaccountInput>
  }

  export type InterviewReportCreateManySubaccountInputEnvelope = {
    data: InterviewReportCreateManySubaccountInput | InterviewReportCreateManySubaccountInput[]
    skipDuplicates?: boolean
  }

  export type ResumeProfileCreateWithoutSubaccountInput = {
    id?: string
    source: string
    content: string
    skills?: ResumeProfileCreateskillsInput | string[]
    createdAt?: Date | string
  }

  export type ResumeProfileUncheckedCreateWithoutSubaccountInput = {
    id?: string
    source: string
    content: string
    skills?: ResumeProfileCreateskillsInput | string[]
    createdAt?: Date | string
  }

  export type ResumeProfileCreateOrConnectWithoutSubaccountInput = {
    where: ResumeProfileWhereUniqueInput
    create: XOR<ResumeProfileCreateWithoutSubaccountInput, ResumeProfileUncheckedCreateWithoutSubaccountInput>
  }

  export type ResumeProfileCreateManySubaccountInputEnvelope = {
    data: ResumeProfileCreateManySubaccountInput | ResumeProfileCreateManySubaccountInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSubaccountsInput = {
    update: XOR<UserUpdateWithoutSubaccountsInput, UserUncheckedUpdateWithoutSubaccountsInput>
    create: XOR<UserCreateWithoutSubaccountsInput, UserUncheckedCreateWithoutSubaccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubaccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubaccountsInput, UserUncheckedUpdateWithoutSubaccountsInput>
  }

  export type UserUpdateWithoutSubaccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutSubaccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionUpsertWithWhereUniqueWithoutSubaccountInput = {
    where: InteractionWhereUniqueInput
    update: XOR<InteractionUpdateWithoutSubaccountInput, InteractionUncheckedUpdateWithoutSubaccountInput>
    create: XOR<InteractionCreateWithoutSubaccountInput, InteractionUncheckedCreateWithoutSubaccountInput>
  }

  export type InteractionUpdateWithWhereUniqueWithoutSubaccountInput = {
    where: InteractionWhereUniqueInput
    data: XOR<InteractionUpdateWithoutSubaccountInput, InteractionUncheckedUpdateWithoutSubaccountInput>
  }

  export type InteractionUpdateManyWithWhereWithoutSubaccountInput = {
    where: InteractionScalarWhereInput
    data: XOR<InteractionUpdateManyMutationInput, InteractionUncheckedUpdateManyWithoutSubaccountInput>
  }

  export type InteractionScalarWhereInput = {
    AND?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
    OR?: InteractionScalarWhereInput[]
    NOT?: InteractionScalarWhereInput | InteractionScalarWhereInput[]
    id?: StringFilter<"Interaction"> | string
    subaccountId?: StringFilter<"Interaction"> | string
    type?: StringFilter<"Interaction"> | string
    content?: StringFilter<"Interaction"> | string
    createdAt?: DateTimeFilter<"Interaction"> | Date | string
  }

  export type InterviewReportUpsertWithWhereUniqueWithoutSubaccountInput = {
    where: InterviewReportWhereUniqueInput
    update: XOR<InterviewReportUpdateWithoutSubaccountInput, InterviewReportUncheckedUpdateWithoutSubaccountInput>
    create: XOR<InterviewReportCreateWithoutSubaccountInput, InterviewReportUncheckedCreateWithoutSubaccountInput>
  }

  export type InterviewReportUpdateWithWhereUniqueWithoutSubaccountInput = {
    where: InterviewReportWhereUniqueInput
    data: XOR<InterviewReportUpdateWithoutSubaccountInput, InterviewReportUncheckedUpdateWithoutSubaccountInput>
  }

  export type InterviewReportUpdateManyWithWhereWithoutSubaccountInput = {
    where: InterviewReportScalarWhereInput
    data: XOR<InterviewReportUpdateManyMutationInput, InterviewReportUncheckedUpdateManyWithoutSubaccountInput>
  }

  export type InterviewReportScalarWhereInput = {
    AND?: InterviewReportScalarWhereInput | InterviewReportScalarWhereInput[]
    OR?: InterviewReportScalarWhereInput[]
    NOT?: InterviewReportScalarWhereInput | InterviewReportScalarWhereInput[]
    id?: StringFilter<"InterviewReport"> | string
    subaccountId?: StringFilter<"InterviewReport"> | string
    role?: StringFilter<"InterviewReport"> | string
    questions?: StringFilter<"InterviewReport"> | string
    answers?: StringFilter<"InterviewReport"> | string
    evaluation?: StringFilter<"InterviewReport"> | string
    score?: FloatFilter<"InterviewReport"> | number
    createdAt?: DateTimeFilter<"InterviewReport"> | Date | string
  }

  export type ResumeProfileUpsertWithWhereUniqueWithoutSubaccountInput = {
    where: ResumeProfileWhereUniqueInput
    update: XOR<ResumeProfileUpdateWithoutSubaccountInput, ResumeProfileUncheckedUpdateWithoutSubaccountInput>
    create: XOR<ResumeProfileCreateWithoutSubaccountInput, ResumeProfileUncheckedCreateWithoutSubaccountInput>
  }

  export type ResumeProfileUpdateWithWhereUniqueWithoutSubaccountInput = {
    where: ResumeProfileWhereUniqueInput
    data: XOR<ResumeProfileUpdateWithoutSubaccountInput, ResumeProfileUncheckedUpdateWithoutSubaccountInput>
  }

  export type ResumeProfileUpdateManyWithWhereWithoutSubaccountInput = {
    where: ResumeProfileScalarWhereInput
    data: XOR<ResumeProfileUpdateManyMutationInput, ResumeProfileUncheckedUpdateManyWithoutSubaccountInput>
  }

  export type ResumeProfileScalarWhereInput = {
    AND?: ResumeProfileScalarWhereInput | ResumeProfileScalarWhereInput[]
    OR?: ResumeProfileScalarWhereInput[]
    NOT?: ResumeProfileScalarWhereInput | ResumeProfileScalarWhereInput[]
    id?: StringFilter<"ResumeProfile"> | string
    subaccountId?: StringFilter<"ResumeProfile"> | string
    source?: StringFilter<"ResumeProfile"> | string
    content?: StringFilter<"ResumeProfile"> | string
    skills?: StringNullableListFilter<"ResumeProfile">
    createdAt?: DateTimeFilter<"ResumeProfile"> | Date | string
  }

  export type SubaccountCreateWithoutInteractionsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubaccountsInput
    interviews?: InterviewReportCreateNestedManyWithoutSubaccountInput
    resumes?: ResumeProfileCreateNestedManyWithoutSubaccountInput
  }

  export type SubaccountUncheckedCreateWithoutInteractionsInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    interviews?: InterviewReportUncheckedCreateNestedManyWithoutSubaccountInput
    resumes?: ResumeProfileUncheckedCreateNestedManyWithoutSubaccountInput
  }

  export type SubaccountCreateOrConnectWithoutInteractionsInput = {
    where: SubaccountWhereUniqueInput
    create: XOR<SubaccountCreateWithoutInteractionsInput, SubaccountUncheckedCreateWithoutInteractionsInput>
  }

  export type SubaccountUpsertWithoutInteractionsInput = {
    update: XOR<SubaccountUpdateWithoutInteractionsInput, SubaccountUncheckedUpdateWithoutInteractionsInput>
    create: XOR<SubaccountCreateWithoutInteractionsInput, SubaccountUncheckedCreateWithoutInteractionsInput>
    where?: SubaccountWhereInput
  }

  export type SubaccountUpdateToOneWithWhereWithoutInteractionsInput = {
    where?: SubaccountWhereInput
    data: XOR<SubaccountUpdateWithoutInteractionsInput, SubaccountUncheckedUpdateWithoutInteractionsInput>
  }

  export type SubaccountUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubaccountsNestedInput
    interviews?: InterviewReportUpdateManyWithoutSubaccountNestedInput
    resumes?: ResumeProfileUpdateManyWithoutSubaccountNestedInput
  }

  export type SubaccountUncheckedUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviews?: InterviewReportUncheckedUpdateManyWithoutSubaccountNestedInput
    resumes?: ResumeProfileUncheckedUpdateManyWithoutSubaccountNestedInput
  }

  export type SubaccountCreateWithoutInterviewsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubaccountsInput
    interactions?: InteractionCreateNestedManyWithoutSubaccountInput
    resumes?: ResumeProfileCreateNestedManyWithoutSubaccountInput
  }

  export type SubaccountUncheckedCreateWithoutInterviewsInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    interactions?: InteractionUncheckedCreateNestedManyWithoutSubaccountInput
    resumes?: ResumeProfileUncheckedCreateNestedManyWithoutSubaccountInput
  }

  export type SubaccountCreateOrConnectWithoutInterviewsInput = {
    where: SubaccountWhereUniqueInput
    create: XOR<SubaccountCreateWithoutInterviewsInput, SubaccountUncheckedCreateWithoutInterviewsInput>
  }

  export type SubaccountUpsertWithoutInterviewsInput = {
    update: XOR<SubaccountUpdateWithoutInterviewsInput, SubaccountUncheckedUpdateWithoutInterviewsInput>
    create: XOR<SubaccountCreateWithoutInterviewsInput, SubaccountUncheckedCreateWithoutInterviewsInput>
    where?: SubaccountWhereInput
  }

  export type SubaccountUpdateToOneWithWhereWithoutInterviewsInput = {
    where?: SubaccountWhereInput
    data: XOR<SubaccountUpdateWithoutInterviewsInput, SubaccountUncheckedUpdateWithoutInterviewsInput>
  }

  export type SubaccountUpdateWithoutInterviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubaccountsNestedInput
    interactions?: InteractionUpdateManyWithoutSubaccountNestedInput
    resumes?: ResumeProfileUpdateManyWithoutSubaccountNestedInput
  }

  export type SubaccountUncheckedUpdateWithoutInterviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interactions?: InteractionUncheckedUpdateManyWithoutSubaccountNestedInput
    resumes?: ResumeProfileUncheckedUpdateManyWithoutSubaccountNestedInput
  }

  export type SubaccountCreateWithoutResumesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubaccountsInput
    interactions?: InteractionCreateNestedManyWithoutSubaccountInput
    interviews?: InterviewReportCreateNestedManyWithoutSubaccountInput
  }

  export type SubaccountUncheckedCreateWithoutResumesInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    interactions?: InteractionUncheckedCreateNestedManyWithoutSubaccountInput
    interviews?: InterviewReportUncheckedCreateNestedManyWithoutSubaccountInput
  }

  export type SubaccountCreateOrConnectWithoutResumesInput = {
    where: SubaccountWhereUniqueInput
    create: XOR<SubaccountCreateWithoutResumesInput, SubaccountUncheckedCreateWithoutResumesInput>
  }

  export type SubaccountUpsertWithoutResumesInput = {
    update: XOR<SubaccountUpdateWithoutResumesInput, SubaccountUncheckedUpdateWithoutResumesInput>
    create: XOR<SubaccountCreateWithoutResumesInput, SubaccountUncheckedCreateWithoutResumesInput>
    where?: SubaccountWhereInput
  }

  export type SubaccountUpdateToOneWithWhereWithoutResumesInput = {
    where?: SubaccountWhereInput
    data: XOR<SubaccountUpdateWithoutResumesInput, SubaccountUncheckedUpdateWithoutResumesInput>
  }

  export type SubaccountUpdateWithoutResumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubaccountsNestedInput
    interactions?: InteractionUpdateManyWithoutSubaccountNestedInput
    interviews?: InterviewReportUpdateManyWithoutSubaccountNestedInput
  }

  export type SubaccountUncheckedUpdateWithoutResumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interactions?: InteractionUncheckedUpdateManyWithoutSubaccountNestedInput
    interviews?: InterviewReportUncheckedUpdateManyWithoutSubaccountNestedInput
  }

  export type SubaccountCreateManyUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubaccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interactions?: InteractionUpdateManyWithoutSubaccountNestedInput
    interviews?: InterviewReportUpdateManyWithoutSubaccountNestedInput
    resumes?: ResumeProfileUpdateManyWithoutSubaccountNestedInput
  }

  export type SubaccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interactions?: InteractionUncheckedUpdateManyWithoutSubaccountNestedInput
    interviews?: InterviewReportUncheckedUpdateManyWithoutSubaccountNestedInput
    resumes?: ResumeProfileUncheckedUpdateManyWithoutSubaccountNestedInput
  }

  export type SubaccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionCreateManySubaccountInput = {
    id?: string
    type: string
    content: string
    createdAt?: Date | string
  }

  export type InterviewReportCreateManySubaccountInput = {
    id?: string
    role: string
    questions: string
    answers: string
    evaluation: string
    score: number
    createdAt?: Date | string
  }

  export type ResumeProfileCreateManySubaccountInput = {
    id?: string
    source: string
    content: string
    skills?: ResumeProfileCreateskillsInput | string[]
    createdAt?: Date | string
  }

  export type InteractionUpdateWithoutSubaccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionUncheckedUpdateWithoutSubaccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteractionUncheckedUpdateManyWithoutSubaccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewReportUpdateWithoutSubaccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    answers?: StringFieldUpdateOperationsInput | string
    evaluation?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewReportUncheckedUpdateWithoutSubaccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    answers?: StringFieldUpdateOperationsInput | string
    evaluation?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewReportUncheckedUpdateManyWithoutSubaccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    questions?: StringFieldUpdateOperationsInput | string
    answers?: StringFieldUpdateOperationsInput | string
    evaluation?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeProfileUpdateWithoutSubaccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    skills?: ResumeProfileUpdateskillsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeProfileUncheckedUpdateWithoutSubaccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    skills?: ResumeProfileUpdateskillsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeProfileUncheckedUpdateManyWithoutSubaccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    skills?: ResumeProfileUpdateskillsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}